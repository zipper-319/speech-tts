// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: tts/v1/schema.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpeakerInfo int32

const (
	SpeakerInfo_DaXiaoFang_Chinese_Mandarin_Female_Adult SpeakerInfo = 0  // 达小芳（温柔女声）
	SpeakerInfo_DaXiaoQi_Chinese_Mandarin_Female_Adult   SpeakerInfo = 1  // 达小琪（甜美女声）
	SpeakerInfo_DaDaQiang_Chinese_Mandarin_Male_Adult    SpeakerInfo = 2  // 达大强（磁性男声）
	SpeakerInfo_DaDaGang_Chinese_Mandarin_Male_Adult     SpeakerInfo = 3  // 达大刚（标准男声）
	SpeakerInfo_DaTongTong_Chinese_Mandarin_Female_Child SpeakerInfo = 4  // 达彤彤（儿童女声）
	SpeakerInfo_DaMingMing_Chinese_Mandarin_Male_Child   SpeakerInfo = 5  // 达明明（儿童男声）
	SpeakerInfo_DaXiaoChuan_Chinese_Sichuan_Female_Adult SpeakerInfo = 6  // 达小川（四川女声）
	SpeakerInfo_DaXiaoYue_Chinese_Yueyu_Female_Adult     SpeakerInfo = 7  // 达小粤（粤语女声）
	SpeakerInfo_DaXiaoBei_Chinese_Dongbei_Female_Adult   SpeakerInfo = 8  // 达小北（东北女声）
	SpeakerInfo_DaXiaoTai_Chinese_Taiwan_Female_Adult    SpeakerInfo = 9  // 达小台（台湾女声）
	SpeakerInfo_DaDaXiang_Chinese_Hunan_Male_Adult       SpeakerInfo = 10 // 达大湘（湖南男声）
	SpeakerInfo_DaXiaoHu_Chinese_ShangHai_Female_Adult   SpeakerInfo = 11 // 达小沪（上海女声）
	SpeakerInfo_DaXiaoguan_English_Female_Adult          SpeakerInfo = 12 // 达小罐（英文女声）
	SpeakerInfo_DaXiaoBo_Emotions_Female_Adult           SpeakerInfo = 13 // 达小波（情感发音人）
	SpeakerInfo_DaXiaoWu_Chinese_Mandarin_Female_Adult   SpeakerInfo = 14 // 达小舞（电音女声)
)

// Enum value maps for SpeakerInfo.
var (
	SpeakerInfo_name = map[int32]string{
		0:  "DaXiaoFang_Chinese_Mandarin_Female_Adult",
		1:  "DaXiaoQi_Chinese_Mandarin_Female_Adult",
		2:  "DaDaQiang_Chinese_Mandarin_Male_Adult",
		3:  "DaDaGang_Chinese_Mandarin_Male_Adult",
		4:  "DaTongTong_Chinese_Mandarin_Female_Child",
		5:  "DaMingMing_Chinese_Mandarin_Male_Child",
		6:  "DaXiaoChuan_Chinese_Sichuan_Female_Adult",
		7:  "DaXiaoYue_Chinese_Yueyu_Female_Adult",
		8:  "DaXiaoBei_Chinese_Dongbei_Female_Adult",
		9:  "DaXiaoTai_Chinese_Taiwan_Female_Adult",
		10: "DaDaXiang_Chinese_Hunan_Male_Adult",
		11: "DaXiaoHu_Chinese_ShangHai_Female_Adult",
		12: "DaXiaoguan_English_Female_Adult",
		13: "DaXiaoBo_Emotions_Female_Adult",
		14: "DaXiaoWu_Chinese_Mandarin_Female_Adult",
	}
	SpeakerInfo_value = map[string]int32{
		"DaXiaoFang_Chinese_Mandarin_Female_Adult": 0,
		"DaXiaoQi_Chinese_Mandarin_Female_Adult":   1,
		"DaDaQiang_Chinese_Mandarin_Male_Adult":    2,
		"DaDaGang_Chinese_Mandarin_Male_Adult":     3,
		"DaTongTong_Chinese_Mandarin_Female_Child": 4,
		"DaMingMing_Chinese_Mandarin_Male_Child":   5,
		"DaXiaoChuan_Chinese_Sichuan_Female_Adult": 6,
		"DaXiaoYue_Chinese_Yueyu_Female_Adult":     7,
		"DaXiaoBei_Chinese_Dongbei_Female_Adult":   8,
		"DaXiaoTai_Chinese_Taiwan_Female_Adult":    9,
		"DaDaXiang_Chinese_Hunan_Male_Adult":       10,
		"DaXiaoHu_Chinese_ShangHai_Female_Adult":   11,
		"DaXiaoguan_English_Female_Adult":          12,
		"DaXiaoBo_Emotions_Female_Adult":           13,
		"DaXiaoWu_Chinese_Mandarin_Female_Adult":   14,
	}
)

func (x SpeakerInfo) Enum() *SpeakerInfo {
	p := new(SpeakerInfo)
	*p = x
	return p
}

func (x SpeakerInfo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpeakerInfo) Descriptor() protoreflect.EnumDescriptor {
	return file_tts_v1_schema_proto_enumTypes[0].Descriptor()
}

func (SpeakerInfo) Type() protoreflect.EnumType {
	return &file_tts_v1_schema_proto_enumTypes[0]
}

func (x SpeakerInfo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpeakerInfo.Descriptor instead.
func (SpeakerInfo) EnumDescriptor() ([]byte, []int) {
	return file_tts_v1_schema_proto_rawDescGZIP(), []int{0}
}

type TtsErr int32

const (
	TtsErr_TTS_ERR_INIT                 TtsErr = 0     // keep
	TtsErr_TTS_ERR_OK                   TtsErr = 10000 // tts服务正常返回
	TtsErr_TTS_ERR_INVALID_RATE         TtsErr = 10001 // rate值错误
	TtsErr_TTS_ERR_TEXT_LENGTH_OVERFLOW TtsErr = 10002 // 请求文本过长
	TtsErr_TTS_ERR_INVALID_SPEED        TtsErr = 10003 // 无效的speed[1,5],默认3
	TtsErr_TTS_ERR_INVALID_VOLUME       TtsErr = 10004 // 无效的volume[1,5],默认3
	TtsErr_TTS_ERR_INVALID_PITCH        TtsErr = 10005 // 无效的pitch[low,medium,high],默认medium
	TtsErr_TTS_ERR_INVALID_SPEAKER      TtsErr = 10006 // 无效的speed[0,10]
	TtsErr_TTS_ERR_INVALID_TYPE         TtsErr = 10007 // 无效的type,只支持CloudMinds
	TtsErr_TTS_ERR_SYN_CANCELLED        TtsErr = 10008 // 音频合成cancelled
	TtsErr_TTS_ERR_SYN_FAILURE          TtsErr = 10009 // 音频合成异常：cuda oom
	TtsErr_TTS_ERR_NO_FREE_MOUDLE       TtsErr = 10010 // 没有可用的decoder
	TtsErr_TTS_ERR_MODULE_INPUT_TEXT    TtsErr = 10011 // 模型输入文本出错
	TtsErr_TTS_ERR_TEXT_NORMALIZE       TtsErr = 10012 // 文本序列化出错
	TtsErr_TTS_ERR_INVALID_VOICE_TUNING TtsErr = 10013 // 无效的后置开关值[on,off]
)

// Enum value maps for TtsErr.
var (
	TtsErr_name = map[int32]string{
		0:     "TTS_ERR_INIT",
		10000: "TTS_ERR_OK",
		10001: "TTS_ERR_INVALID_RATE",
		10002: "TTS_ERR_TEXT_LENGTH_OVERFLOW",
		10003: "TTS_ERR_INVALID_SPEED",
		10004: "TTS_ERR_INVALID_VOLUME",
		10005: "TTS_ERR_INVALID_PITCH",
		10006: "TTS_ERR_INVALID_SPEAKER",
		10007: "TTS_ERR_INVALID_TYPE",
		10008: "TTS_ERR_SYN_CANCELLED",
		10009: "TTS_ERR_SYN_FAILURE",
		10010: "TTS_ERR_NO_FREE_MOUDLE",
		10011: "TTS_ERR_MODULE_INPUT_TEXT",
		10012: "TTS_ERR_TEXT_NORMALIZE",
		10013: "TTS_ERR_INVALID_VOICE_TUNING",
	}
	TtsErr_value = map[string]int32{
		"TTS_ERR_INIT":                 0,
		"TTS_ERR_OK":                   10000,
		"TTS_ERR_INVALID_RATE":         10001,
		"TTS_ERR_TEXT_LENGTH_OVERFLOW": 10002,
		"TTS_ERR_INVALID_SPEED":        10003,
		"TTS_ERR_INVALID_VOLUME":       10004,
		"TTS_ERR_INVALID_PITCH":        10005,
		"TTS_ERR_INVALID_SPEAKER":      10006,
		"TTS_ERR_INVALID_TYPE":         10007,
		"TTS_ERR_SYN_CANCELLED":        10008,
		"TTS_ERR_SYN_FAILURE":          10009,
		"TTS_ERR_NO_FREE_MOUDLE":       10010,
		"TTS_ERR_MODULE_INPUT_TEXT":    10011,
		"TTS_ERR_TEXT_NORMALIZE":       10012,
		"TTS_ERR_INVALID_VOICE_TUNING": 10013,
	}
)

func (x TtsErr) Enum() *TtsErr {
	p := new(TtsErr)
	*p = x
	return p
}

func (x TtsErr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TtsErr) Descriptor() protoreflect.EnumDescriptor {
	return file_tts_v1_schema_proto_enumTypes[1].Descriptor()
}

func (TtsErr) Type() protoreflect.EnumType {
	return &file_tts_v1_schema_proto_enumTypes[1]
}

func (x TtsErr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TtsErr.Descriptor instead.
func (TtsErr) EnumDescriptor() ([]byte, []int) {
	return file_tts_v1_schema_proto_rawDescGZIP(), []int{1}
}

type PcmStatus int32

const (
	PcmStatus_STATUS_DEF   PcmStatus = 0 // keep
	PcmStatus_STATUS_START PcmStatus = 1 // 开始
	PcmStatus_STATUS_MID   PcmStatus = 2 // 中间状态
	PcmStatus_STATUS_END   PcmStatus = 3 // 结束
)

// Enum value maps for PcmStatus.
var (
	PcmStatus_name = map[int32]string{
		0: "STATUS_DEF",
		1: "STATUS_START",
		2: "STATUS_MID",
		3: "STATUS_END",
	}
	PcmStatus_value = map[string]int32{
		"STATUS_DEF":   0,
		"STATUS_START": 1,
		"STATUS_MID":   2,
		"STATUS_END":   3,
	}
)

func (x PcmStatus) Enum() *PcmStatus {
	p := new(PcmStatus)
	*p = x
	return p
}

func (x PcmStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PcmStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tts_v1_schema_proto_enumTypes[2].Descriptor()
}

func (PcmStatus) Type() protoreflect.EnumType {
	return &file_tts_v1_schema_proto_enumTypes[2]
}

func (x PcmStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PcmStatus.Descriptor instead.
func (PcmStatus) EnumDescriptor() ([]byte, []int) {
	return file_tts_v1_schema_proto_rawDescGZIP(), []int{2}
}

type TtsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location      string      `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`                        // Cloud 传固定值
	Type          string      `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`                                // CloudMinds  传固定值
	Speaker       SpeakerInfo `protobuf:"varint,3,opt,name=speaker,proto3,enum=schema.SpeakerInfo" json:"speaker,omitempty"` // 具体发音人的id 发音人具体参考
	Speed         string      `protobuf:"bytes,4,opt,name=speed,proto3" json:"speed,omitempty"`                              // 1 2 3 4 5 发音速度 默认3
	Volume        string      `protobuf:"bytes,5,opt,name=volume,proto3" json:"volume,omitempty"`                            // 1 2 3 4 5 发音音量 默认3
	Pitch         string      `protobuf:"bytes,6,opt,name=pitch,proto3" json:"pitch,omitempty"`                              // low medium high  音调 默认 medium
	StreamEnable  bool        `protobuf:"varint,7,opt,name=streamEnable,proto3" json:"streamEnable,omitempty"`               // 是否流式合成  默认 false
	Text          string      `protobuf:"bytes,8,opt,name=text,proto3" json:"text,omitempty"`                                // 具体需要合成的文本
	TextPreHandle bool        `protobuf:"varint,9,opt,name=textPreHandle,proto3" json:"textPreHandle,omitempty"`             // 是否需要文本预处理
	VoiceTuning   string      `protobuf:"bytes,10,opt,name=voiceTuning,proto3" json:"voiceTuning,omitempty"`                 // voiceTuning开关,传 "on"或者"off"
	// 情感发音，取值范围["Chat","Angry","Gentle","Cheerful","Serious","General","Affectionate","Lyrical","Newscast","CustomerService"]
	Emotions string `protobuf:"bytes,11,opt,name=Emotions,proto3" json:"Emotions,omitempty"`
	// parameterSpeakerName 传字符串类型的发音人，兼容speakerInfo，优先选择这个,如果为空，就选择id
	ParameterSpeakerName string `protobuf:"bytes,12,opt,name=ParameterSpeakerName,proto3" json:"ParameterSpeakerName,omitempty"`
	TraceId              string `protobuf:"bytes,13,opt,name=traceId,proto3" json:"traceId,omitempty"`
	RootTraceId          string `protobuf:"bytes,14,opt,name=rootTraceId,proto3" json:"rootTraceId,omitempty"`
}

func (x *TtsReq) Reset() {
	*x = TtsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v1_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TtsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TtsReq) ProtoMessage() {}

func (x *TtsReq) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v1_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TtsReq.ProtoReflect.Descriptor instead.
func (*TtsReq) Descriptor() ([]byte, []int) {
	return file_tts_v1_schema_proto_rawDescGZIP(), []int{0}
}

func (x *TtsReq) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *TtsReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TtsReq) GetSpeaker() SpeakerInfo {
	if x != nil {
		return x.Speaker
	}
	return SpeakerInfo_DaXiaoFang_Chinese_Mandarin_Female_Adult
}

func (x *TtsReq) GetSpeed() string {
	if x != nil {
		return x.Speed
	}
	return ""
}

func (x *TtsReq) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

func (x *TtsReq) GetPitch() string {
	if x != nil {
		return x.Pitch
	}
	return ""
}

func (x *TtsReq) GetStreamEnable() bool {
	if x != nil {
		return x.StreamEnable
	}
	return false
}

func (x *TtsReq) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TtsReq) GetTextPreHandle() bool {
	if x != nil {
		return x.TextPreHandle
	}
	return false
}

func (x *TtsReq) GetVoiceTuning() string {
	if x != nil {
		return x.VoiceTuning
	}
	return ""
}

func (x *TtsReq) GetEmotions() string {
	if x != nil {
		return x.Emotions
	}
	return ""
}

func (x *TtsReq) GetParameterSpeakerName() string {
	if x != nil {
		return x.ParameterSpeakerName
	}
	return ""
}

func (x *TtsReq) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *TtsReq) GetRootTraceId() string {
	if x != nil {
		return x.RootTraceId
	}
	return ""
}

type TtsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pcm            []byte             `protobuf:"bytes,1,opt,name=pcm,proto3" json:"pcm,omitempty"`                              // 具体的音频流(不会有空帧出现)
	Status         PcmStatus          `protobuf:"varint,2,opt,name=status,proto3,enum=schema.PcmStatus" json:"status,omitempty"` // pcm状态(2中间状态，目前只有2)
	Error          TtsErr             `protobuf:"varint,3,opt,name=error,proto3,enum=schema.TtsErr" json:"error,omitempty"`      // 错误码
	Mouths         []*TimedMouthShape `protobuf:"bytes,4,rep,name=mouths,proto3" json:"mouths,omitempty"`                        // 嘴型，status=2时输出，
	DebugInfo      string             `protobuf:"bytes,5,opt,name=DebugInfo,proto3" json:"DebugInfo,omitempty"`                  // 调试信息,当有debufinfo时需要输出
	Version        string             `protobuf:"bytes,6,opt,name=Version,proto3" json:"Version,omitempty"`                      // 每次调用都要返回version信息
	NormalizedText string             `protobuf:"bytes,7,opt,name=NormalizedText,proto3" json:"NormalizedText,omitempty"`        // 当前正在合成的正则后的文本片段
	OriginalText   string             `protobuf:"bytes,8,opt,name=originalText,proto3" json:"originalText,omitempty"`            // 当前正在合成的正则前的文本片段(端侧需要的)
	Expression     *Expression        `protobuf:"bytes,9,opt,name=expression,proto3" json:"expression,omitempty"`                // 表情的具体数据
}

func (x *TtsRes) Reset() {
	*x = TtsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v1_schema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TtsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TtsRes) ProtoMessage() {}

func (x *TtsRes) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v1_schema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TtsRes.ProtoReflect.Descriptor instead.
func (*TtsRes) Descriptor() ([]byte, []int) {
	return file_tts_v1_schema_proto_rawDescGZIP(), []int{1}
}

func (x *TtsRes) GetPcm() []byte {
	if x != nil {
		return x.Pcm
	}
	return nil
}

func (x *TtsRes) GetStatus() PcmStatus {
	if x != nil {
		return x.Status
	}
	return PcmStatus_STATUS_DEF
}

func (x *TtsRes) GetError() TtsErr {
	if x != nil {
		return x.Error
	}
	return TtsErr_TTS_ERR_INIT
}

func (x *TtsRes) GetMouths() []*TimedMouthShape {
	if x != nil {
		return x.Mouths
	}
	return nil
}

func (x *TtsRes) GetDebugInfo() string {
	if x != nil {
		return x.DebugInfo
	}
	return ""
}

func (x *TtsRes) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TtsRes) GetNormalizedText() string {
	if x != nil {
		return x.NormalizedText
	}
	return ""
}

func (x *TtsRes) GetOriginalText() string {
	if x != nil {
		return x.OriginalText
	}
	return ""
}

func (x *TtsRes) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

type Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      []float32 `protobuf:"fixed32,1,rep,packed,name=data,proto3" json:"data,omitempty"`                     // 具体的表情数据, frame_size*frame_dim
	FrameSize int32     `protobuf:"varint,2,opt,name=frame_size,json=frameSize,proto3" json:"frame_size,omitempty"`  // 表情帧数
	FrameDim  int32     `protobuf:"varint,3,opt,name=frame_dim,json=frameDim,proto3" json:"frame_dim,omitempty"`     // 一帧的维度，即多少个float
	FrameTime float32   `protobuf:"fixed32,4,opt,name=frame_time,json=frameTime,proto3" json:"frame_time,omitempty"` // 一帧的持续时间
}

func (x *Expression) Reset() {
	*x = Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v1_schema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v1_schema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_tts_v1_schema_proto_rawDescGZIP(), []int{2}
}

func (x *Expression) GetData() []float32 {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Expression) GetFrameSize() int32 {
	if x != nil {
		return x.FrameSize
	}
	return 0
}

func (x *Expression) GetFrameDim() int32 {
	if x != nil {
		return x.FrameDim
	}
	return 0
}

func (x *Expression) GetFrameTime() float32 {
	if x != nil {
		return x.FrameTime
	}
	return 0
}

type VerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VerReq) Reset() {
	*x = VerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v1_schema_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerReq) ProtoMessage() {}

func (x *VerReq) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v1_schema_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerReq.ProtoReflect.Descriptor instead.
func (*VerReq) Descriptor() ([]byte, []int) {
	return file_tts_v1_schema_proto_rawDescGZIP(), []int{3}
}

type VerRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VerRsp) Reset() {
	*x = VerRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v1_schema_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerRsp) ProtoMessage() {}

func (x *VerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v1_schema_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerRsp.ProtoReflect.Descriptor instead.
func (*VerRsp) Descriptor() ([]byte, []int) {
	return file_tts_v1_schema_proto_rawDescGZIP(), []int{4}
}

func (x *VerRsp) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type TimedMouthShape struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DurationUs uint64 `protobuf:"varint,1,opt,name=durationUs,proto3" json:"durationUs,omitempty"` // 时间
	Mouth      int32  `protobuf:"varint,2,opt,name=mouth,proto3" json:"mouth,omitempty"`           // 嘴型 enum MouthShape
}

func (x *TimedMouthShape) Reset() {
	*x = TimedMouthShape{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v1_schema_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimedMouthShape) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimedMouthShape) ProtoMessage() {}

func (x *TimedMouthShape) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v1_schema_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimedMouthShape.ProtoReflect.Descriptor instead.
func (*TimedMouthShape) Descriptor() ([]byte, []int) {
	return file_tts_v1_schema_proto_rawDescGZIP(), []int{5}
}

func (x *TimedMouthShape) GetDurationUs() uint64 {
	if x != nil {
		return x.DurationUs
	}
	return 0
}

func (x *TimedMouthShape) GetMouth() int32 {
	if x != nil {
		return x.Mouth
	}
	return 0
}

type MixTtsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ttsreq *TtsReq   `protobuf:"bytes,1,opt,name=ttsreq,proto3" json:"ttsreq,omitempty"`
	Weight []float32 `protobuf:"fixed32,2,rep,packed,name=weight,proto3" json:"weight,omitempty"` // 发音人权重，目前只有27个，超过27个截断，没有补0
}

func (x *MixTtsReq) Reset() {
	*x = MixTtsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v1_schema_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MixTtsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MixTtsReq) ProtoMessage() {}

func (x *MixTtsReq) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v1_schema_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MixTtsReq.ProtoReflect.Descriptor instead.
func (*MixTtsReq) Descriptor() ([]byte, []int) {
	return file_tts_v1_schema_proto_rawDescGZIP(), []int{6}
}

func (x *MixTtsReq) GetTtsreq() *TtsReq {
	if x != nil {
		return x.Ttsreq
	}
	return nil
}

func (x *MixTtsReq) GetWeight() []float32 {
	if x != nil {
		return x.Weight
	}
	return nil
}

type SpeakerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*SpeakerParameter `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"` // 发音人列表
}

func (x *SpeakerList) Reset() {
	*x = SpeakerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v1_schema_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeakerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerList) ProtoMessage() {}

func (x *SpeakerList) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v1_schema_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerList.ProtoReflect.Descriptor instead.
func (*SpeakerList) Descriptor() ([]byte, []int) {
	return file_tts_v1_schema_proto_rawDescGZIP(), []int{7}
}

func (x *SpeakerList) GetList() []*SpeakerParameter {
	if x != nil {
		return x.List
	}
	return nil
}

type SpeakerParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpeakerId            int32  `protobuf:"varint,1,opt,name=speakerId,proto3" json:"speakerId,omitempty"`                      // 发音人id
	SpeakerName          string `protobuf:"bytes,2,opt,name=speakerName,proto3" json:"speakerName,omitempty"`                   // 发音人名字
	ParameterSpeakerName string `protobuf:"bytes,3,opt,name=parameterSpeakerName,proto3" json:"parameterSpeakerName,omitempty"` // 发音人英文名字
}

func (x *SpeakerParameter) Reset() {
	*x = SpeakerParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v1_schema_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeakerParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerParameter) ProtoMessage() {}

func (x *SpeakerParameter) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v1_schema_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerParameter.ProtoReflect.Descriptor instead.
func (*SpeakerParameter) Descriptor() ([]byte, []int) {
	return file_tts_v1_schema_proto_rawDescGZIP(), []int{8}
}

func (x *SpeakerParameter) GetSpeakerId() int32 {
	if x != nil {
		return x.SpeakerId
	}
	return 0
}

func (x *SpeakerParameter) GetSpeakerName() string {
	if x != nil {
		return x.SpeakerName
	}
	return ""
}

func (x *SpeakerParameter) GetParameterSpeakerName() string {
	if x != nil {
		return x.ParameterSpeakerName
	}
	return ""
}

var File_tts_v1_schema_proto protoreflect.FileDescriptor

var file_tts_v1_schema_proto_rawDesc = []byte{
	0x0a, 0x13, 0x74, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd3, 0x03, 0x0a, 0x06, 0x54, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x2d, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xfa,
	0x42, 0x09, 0x72, 0x07, 0x32, 0x05, 0x5b, 0x30, 0x2d, 0x35, 0x5d, 0x52, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x24, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x72, 0x07, 0x32, 0x05, 0x5b, 0x30, 0x2d, 0x35, 0x5d,
	0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x69, 0x74, 0x63,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x69, 0x74, 0x63, 0x68, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x50, 0x72,
	0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74,
	0x65, 0x78, 0x74, 0x50, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x6f, 0x6f, 0x74,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x6f, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xd4, 0x02, 0x0a, 0x06, 0x54,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x63, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x70, 0x63, 0x6d, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x70, 0x63, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x74, 0x73, 0x45, 0x72,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x06, 0x6d, 0x6f, 0x75, 0x74,
	0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4d, 0x6f, 0x75, 0x74, 0x68, 0x53, 0x68, 0x61, 0x70,
	0x65, 0x52, 0x06, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54,
	0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x7b, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x08,
	0x0a, 0x06, 0x56, 0x65, 0x72, 0x52, 0x65, 0x71, 0x22, 0x22, 0x0a, 0x06, 0x56, 0x65, 0x72, 0x52,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x0f,
	0x54, 0x69, 0x6d, 0x65, 0x64, 0x4d, 0x6f, 0x75, 0x74, 0x68, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6d, 0x6f, 0x75, 0x74, 0x68, 0x22, 0x4b, 0x0a, 0x09, 0x4d, 0x69, 0x78, 0x54, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x26, 0x0a, 0x06, 0x74, 0x74, 0x73, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x52, 0x06, 0x74, 0x74, 0x73, 0x72, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0x3b, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x86, 0x01, 0x0a, 0x10, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x2a, 0x8e, 0x05, 0x0a, 0x0b, 0x73, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x61, 0x58, 0x69,
	0x61, 0x6f, 0x46, 0x61, 0x6e, 0x67, 0x5f, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x5f, 0x4d,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x6e, 0x5f, 0x46, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x5f, 0x41,
	0x64, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x61, 0x58, 0x69, 0x61, 0x6f,
	0x51, 0x69, 0x5f, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x69, 0x6e, 0x5f, 0x46, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x5f, 0x41, 0x64, 0x75, 0x6c, 0x74,
	0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x61, 0x44, 0x61, 0x51, 0x69, 0x61, 0x6e, 0x67, 0x5f,
	0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x6e,
	0x5f, 0x4d, 0x61, 0x6c, 0x65, 0x5f, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x10, 0x02, 0x12, 0x28, 0x0a,
	0x24, 0x44, 0x61, 0x44, 0x61, 0x47, 0x61, 0x6e, 0x67, 0x5f, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73,
	0x65, 0x5f, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x6e, 0x5f, 0x4d, 0x61, 0x6c, 0x65, 0x5f,
	0x41, 0x64, 0x75, 0x6c, 0x74, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x61, 0x54, 0x6f, 0x6e,
	0x67, 0x54, 0x6f, 0x6e, 0x67, 0x5f, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x5f, 0x4d, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x69, 0x6e, 0x5f, 0x46, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x5f, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x61, 0x4d, 0x69, 0x6e, 0x67, 0x4d,
	0x69, 0x6e, 0x67, 0x5f, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x69, 0x6e, 0x5f, 0x4d, 0x61, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x10,
	0x05, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x61, 0x58, 0x69, 0x61, 0x6f, 0x43, 0x68, 0x75, 0x61, 0x6e,
	0x5f, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x5f, 0x53, 0x69, 0x63, 0x68, 0x75, 0x61, 0x6e,
	0x5f, 0x46, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x5f, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x10, 0x06, 0x12,
	0x28, 0x0a, 0x24, 0x44, 0x61, 0x58, 0x69, 0x61, 0x6f, 0x59, 0x75, 0x65, 0x5f, 0x43, 0x68, 0x69,
	0x6e, 0x65, 0x73, 0x65, 0x5f, 0x59, 0x75, 0x65, 0x79, 0x75, 0x5f, 0x46, 0x65, 0x6d, 0x61, 0x6c,
	0x65, 0x5f, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x10, 0x07, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x61, 0x58,
	0x69, 0x61, 0x6f, 0x42, 0x65, 0x69, 0x5f, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x5f, 0x44,
	0x6f, 0x6e, 0x67, 0x62, 0x65, 0x69, 0x5f, 0x46, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x5f, 0x41, 0x64,
	0x75, 0x6c, 0x74, 0x10, 0x08, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x61, 0x58, 0x69, 0x61, 0x6f, 0x54,
	0x61, 0x69, 0x5f, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x5f, 0x54, 0x61, 0x69, 0x77, 0x61,
	0x6e, 0x5f, 0x46, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x5f, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x10, 0x09,
	0x12, 0x26, 0x0a, 0x22, 0x44, 0x61, 0x44, 0x61, 0x58, 0x69, 0x61, 0x6e, 0x67, 0x5f, 0x43, 0x68,
	0x69, 0x6e, 0x65, 0x73, 0x65, 0x5f, 0x48, 0x75, 0x6e, 0x61, 0x6e, 0x5f, 0x4d, 0x61, 0x6c, 0x65,
	0x5f, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x10, 0x0a, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x61, 0x58, 0x69,
	0x61, 0x6f, 0x48, 0x75, 0x5f, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x5f, 0x53, 0x68, 0x61,
	0x6e, 0x67, 0x48, 0x61, 0x69, 0x5f, 0x46, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x5f, 0x41, 0x64, 0x75,
	0x6c, 0x74, 0x10, 0x0b, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x61, 0x58, 0x69, 0x61, 0x6f, 0x67, 0x75,
	0x61, 0x6e, 0x5f, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x46, 0x65, 0x6d, 0x61, 0x6c,
	0x65, 0x5f, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x10, 0x0c, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x61, 0x58,
	0x69, 0x61, 0x6f, 0x42, 0x6f, 0x5f, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x46,
	0x65, 0x6d, 0x61, 0x6c, 0x65, 0x5f, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x10, 0x0d, 0x12, 0x2a, 0x0a,
	0x26, 0x44, 0x61, 0x58, 0x69, 0x61, 0x6f, 0x57, 0x75, 0x5f, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73,
	0x65, 0x5f, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x6e, 0x5f, 0x46, 0x65, 0x6d, 0x61, 0x6c,
	0x65, 0x5f, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x10, 0x0e, 0x2a, 0xaa, 0x03, 0x0a, 0x06, 0x74, 0x74,
	0x73, 0x45, 0x72, 0x72, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x54, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0a, 0x54, 0x54, 0x53, 0x5f, 0x45, 0x52,
	0x52, 0x5f, 0x4f, 0x4b, 0x10, 0x90, 0x4e, 0x12, 0x19, 0x0a, 0x14, 0x54, 0x54, 0x53, 0x5f, 0x45,
	0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10,
	0x91, 0x4e, 0x12, 0x21, 0x0a, 0x1c, 0x54, 0x54, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x54, 0x45,
	0x58, 0x54, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c,
	0x4f, 0x57, 0x10, 0x92, 0x4e, 0x12, 0x1a, 0x0a, 0x15, 0x54, 0x54, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x93,
	0x4e, 0x12, 0x1b, 0x0a, 0x16, 0x54, 0x54, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x94, 0x4e, 0x12, 0x1a,
	0x0a, 0x15, 0x54, 0x54, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x50, 0x49, 0x54, 0x43, 0x48, 0x10, 0x95, 0x4e, 0x12, 0x1c, 0x0a, 0x17, 0x54, 0x54,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x50,
	0x45, 0x41, 0x4b, 0x45, 0x52, 0x10, 0x96, 0x4e, 0x12, 0x19, 0x0a, 0x14, 0x54, 0x54, 0x53, 0x5f,
	0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x97, 0x4e, 0x12, 0x1a, 0x0a, 0x15, 0x54, 0x54, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53,
	0x59, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x98, 0x4e, 0x12,
	0x18, 0x0a, 0x13, 0x54, 0x54, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x59, 0x4e, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x99, 0x4e, 0x12, 0x1b, 0x0a, 0x16, 0x54, 0x54, 0x53,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x4d, 0x4f, 0x55,
	0x44, 0x4c, 0x45, 0x10, 0x9a, 0x4e, 0x12, 0x1e, 0x0a, 0x19, 0x54, 0x54, 0x53, 0x5f, 0x45, 0x52,
	0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x54,
	0x45, 0x58, 0x54, 0x10, 0x9b, 0x4e, 0x12, 0x1b, 0x0a, 0x16, 0x54, 0x54, 0x53, 0x5f, 0x45, 0x52,
	0x52, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x10, 0x9c, 0x4e, 0x12, 0x21, 0x0a, 0x1c, 0x54, 0x54, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x55, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x9d, 0x4e, 0x2a, 0x4d, 0x0a, 0x09, 0x70, 0x63, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45,
	0x46, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4d, 0x49, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x45, 0x4e, 0x44, 0x10, 0x03, 0x32, 0xf0, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d,
	0x69, 0x6e, 0x64, 0x73, 0x54, 0x54, 0x53, 0x12, 0x2a, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x0e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x0e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x0e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x52, 0x73,
	0x70, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2f, 0x74, 0x74, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x07, 0x4d, 0x69, 0x78, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x11, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x69, 0x78, 0x54, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x0e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x12, 0x0e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x42, 0x1a, 0x5a, 0x18, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2d, 0x74, 0x74, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x74, 0x73, 0x2f, 0x76,
	0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tts_v1_schema_proto_rawDescOnce sync.Once
	file_tts_v1_schema_proto_rawDescData = file_tts_v1_schema_proto_rawDesc
)

func file_tts_v1_schema_proto_rawDescGZIP() []byte {
	file_tts_v1_schema_proto_rawDescOnce.Do(func() {
		file_tts_v1_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_tts_v1_schema_proto_rawDescData)
	})
	return file_tts_v1_schema_proto_rawDescData
}

var file_tts_v1_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_tts_v1_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_tts_v1_schema_proto_goTypes = []interface{}{
	(SpeakerInfo)(0),         // 0: schema.speakerInfo
	(TtsErr)(0),              // 1: schema.ttsErr
	(PcmStatus)(0),           // 2: schema.pcmStatus
	(*TtsReq)(nil),           // 3: schema.TtsReq
	(*TtsRes)(nil),           // 4: schema.TtsRes
	(*Expression)(nil),       // 5: schema.Expression
	(*VerReq)(nil),           // 6: schema.VerReq
	(*VerRsp)(nil),           // 7: schema.VerRsp
	(*TimedMouthShape)(nil),  // 8: schema.TimedMouthShape
	(*MixTtsReq)(nil),        // 9: schema.MixTtsReq
	(*SpeakerList)(nil),      // 10: schema.SpeakerList
	(*SpeakerParameter)(nil), // 11: schema.SpeakerParameter
}
var file_tts_v1_schema_proto_depIdxs = []int32{
	0,  // 0: schema.TtsReq.speaker:type_name -> schema.speakerInfo
	2,  // 1: schema.TtsRes.status:type_name -> schema.pcmStatus
	1,  // 2: schema.TtsRes.error:type_name -> schema.ttsErr
	8,  // 3: schema.TtsRes.mouths:type_name -> schema.TimedMouthShape
	5,  // 4: schema.TtsRes.expression:type_name -> schema.Expression
	3,  // 5: schema.MixTtsReq.ttsreq:type_name -> schema.TtsReq
	11, // 6: schema.SpeakerList.list:type_name -> schema.SpeakerParameter
	3,  // 7: schema.CloudMindsTTS.Call:input_type -> schema.TtsReq
	6,  // 8: schema.CloudMindsTTS.GetVersion:input_type -> schema.VerReq
	9,  // 9: schema.CloudMindsTTS.MixCall:input_type -> schema.MixTtsReq
	6,  // 10: schema.CloudMindsTTS.GetSpeaker:input_type -> schema.VerReq
	4,  // 11: schema.CloudMindsTTS.Call:output_type -> schema.TtsRes
	7,  // 12: schema.CloudMindsTTS.GetVersion:output_type -> schema.VerRsp
	4,  // 13: schema.CloudMindsTTS.MixCall:output_type -> schema.TtsRes
	10, // 14: schema.CloudMindsTTS.GetSpeaker:output_type -> schema.SpeakerList
	11, // [11:15] is the sub-list for method output_type
	7,  // [7:11] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_tts_v1_schema_proto_init() }
func file_tts_v1_schema_proto_init() {
	if File_tts_v1_schema_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tts_v1_schema_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TtsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v1_schema_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TtsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v1_schema_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v1_schema_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v1_schema_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v1_schema_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimedMouthShape); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v1_schema_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MixTtsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v1_schema_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeakerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v1_schema_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeakerParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tts_v1_schema_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tts_v1_schema_proto_goTypes,
		DependencyIndexes: file_tts_v1_schema_proto_depIdxs,
		EnumInfos:         file_tts_v1_schema_proto_enumTypes,
		MessageInfos:      file_tts_v1_schema_proto_msgTypes,
	}.Build()
	File_tts_v1_schema_proto = out.File
	file_tts_v1_schema_proto_rawDesc = nil
	file_tts_v1_schema_proto_goTypes = nil
	file_tts_v1_schema_proto_depIdxs = nil
}
