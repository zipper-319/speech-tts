// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tts/v1/schema.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TtsReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TtsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TtsReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TtsReqMultiError, or nil if none found.
func (m *TtsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *TtsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Location

	// no validation rules for Type

	// no validation rules for Speaker

	if !_TtsReq_Speed_Pattern.MatchString(m.GetSpeed()) {
		err := TtsReqValidationError{
			field:  "Speed",
			reason: "value does not match regex pattern \"^[1-5]?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_TtsReq_Volume_Pattern.MatchString(m.GetVolume()) {
		err := TtsReqValidationError{
			field:  "Volume",
			reason: "value does not match regex pattern \"^[1-5]?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Pitch

	// no validation rules for StreamEnable

	if utf8.RuneCountInString(m.GetText()) < 1 {
		err := TtsReqValidationError{
			field:  "Text",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TextPreHandle

	// no validation rules for VoiceTuning

	// no validation rules for Emotions

	// no validation rules for ParameterSpeakerName

	// no validation rules for TraceId

	// no validation rules for RootTraceId

	// no validation rules for Identifier

	if len(errors) > 0 {
		return TtsReqMultiError(errors)
	}

	return nil
}

// TtsReqMultiError is an error wrapping multiple validation errors returned by
// TtsReq.ValidateAll() if the designated constraints aren't met.
type TtsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TtsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TtsReqMultiError) AllErrors() []error { return m }

// TtsReqValidationError is the validation error returned by TtsReq.Validate if
// the designated constraints aren't met.
type TtsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TtsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TtsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TtsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TtsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TtsReqValidationError) ErrorName() string { return "TtsReqValidationError" }

// Error satisfies the builtin error interface
func (e TtsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTtsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TtsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TtsReqValidationError{}

var _TtsReq_Speed_Pattern = regexp.MustCompile("^[1-5]?$")

var _TtsReq_Volume_Pattern = regexp.MustCompile("^[1-5]?$")

// Validate checks the field values on TtsRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TtsRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TtsRes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TtsResMultiError, or nil if none found.
func (m *TtsRes) ValidateAll() error {
	return m.validate(true)
}

func (m *TtsRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pcm

	// no validation rules for Status

	// no validation rules for Error

	for idx, item := range m.GetMouths() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TtsResValidationError{
						field:  fmt.Sprintf("Mouths[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TtsResValidationError{
						field:  fmt.Sprintf("Mouths[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TtsResValidationError{
					field:  fmt.Sprintf("Mouths[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DebugInfo

	// no validation rules for Version

	// no validation rules for NormalizedText

	// no validation rules for OriginalText

	if all {
		switch v := interface{}(m.GetExpression()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TtsResValidationError{
					field:  "Expression",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TtsResValidationError{
					field:  "Expression",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpression()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TtsResValidationError{
				field:  "Expression",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TtsResMultiError(errors)
	}

	return nil
}

// TtsResMultiError is an error wrapping multiple validation errors returned by
// TtsRes.ValidateAll() if the designated constraints aren't met.
type TtsResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TtsResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TtsResMultiError) AllErrors() []error { return m }

// TtsResValidationError is the validation error returned by TtsRes.Validate if
// the designated constraints aren't met.
type TtsResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TtsResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TtsResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TtsResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TtsResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TtsResValidationError) ErrorName() string { return "TtsResValidationError" }

// Error satisfies the builtin error interface
func (e TtsResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTtsRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TtsResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TtsResValidationError{}

// Validate checks the field values on Expression with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Expression) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Expression with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExpressionMultiError, or
// nil if none found.
func (m *Expression) ValidateAll() error {
	return m.validate(true)
}

func (m *Expression) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FrameSize

	// no validation rules for FrameDim

	// no validation rules for FrameTime

	if len(errors) > 0 {
		return ExpressionMultiError(errors)
	}

	return nil
}

// ExpressionMultiError is an error wrapping multiple validation errors
// returned by Expression.ValidateAll() if the designated constraints aren't met.
type ExpressionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpressionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpressionMultiError) AllErrors() []error { return m }

// ExpressionValidationError is the validation error returned by
// Expression.Validate if the designated constraints aren't met.
type ExpressionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpressionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpressionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpressionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpressionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpressionValidationError) ErrorName() string { return "ExpressionValidationError" }

// Error satisfies the builtin error interface
func (e ExpressionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpression.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpressionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpressionValidationError{}

// Validate checks the field values on VerReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VerReqMultiError, or nil if none found.
func (m *VerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VerReqMultiError(errors)
	}

	return nil
}

// VerReqMultiError is an error wrapping multiple validation errors returned by
// VerReq.ValidateAll() if the designated constraints aren't met.
type VerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerReqMultiError) AllErrors() []error { return m }

// VerReqValidationError is the validation error returned by VerReq.Validate if
// the designated constraints aren't met.
type VerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerReqValidationError) ErrorName() string { return "VerReqValidationError" }

// Error satisfies the builtin error interface
func (e VerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerReqValidationError{}

// Validate checks the field values on VerRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VerRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VerRspMultiError, or nil if none found.
func (m *VerRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *VerRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if len(errors) > 0 {
		return VerRspMultiError(errors)
	}

	return nil
}

// VerRspMultiError is an error wrapping multiple validation errors returned by
// VerRsp.ValidateAll() if the designated constraints aren't met.
type VerRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerRspMultiError) AllErrors() []error { return m }

// VerRspValidationError is the validation error returned by VerRsp.Validate if
// the designated constraints aren't met.
type VerRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerRspValidationError) ErrorName() string { return "VerRspValidationError" }

// Error satisfies the builtin error interface
func (e VerRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerRspValidationError{}

// Validate checks the field values on TimedMouthShape with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TimedMouthShape) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimedMouthShape with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimedMouthShapeMultiError, or nil if none found.
func (m *TimedMouthShape) ValidateAll() error {
	return m.validate(true)
}

func (m *TimedMouthShape) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DurationUs

	// no validation rules for Mouth

	if len(errors) > 0 {
		return TimedMouthShapeMultiError(errors)
	}

	return nil
}

// TimedMouthShapeMultiError is an error wrapping multiple validation errors
// returned by TimedMouthShape.ValidateAll() if the designated constraints
// aren't met.
type TimedMouthShapeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimedMouthShapeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimedMouthShapeMultiError) AllErrors() []error { return m }

// TimedMouthShapeValidationError is the validation error returned by
// TimedMouthShape.Validate if the designated constraints aren't met.
type TimedMouthShapeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimedMouthShapeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimedMouthShapeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimedMouthShapeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimedMouthShapeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimedMouthShapeValidationError) ErrorName() string { return "TimedMouthShapeValidationError" }

// Error satisfies the builtin error interface
func (e TimedMouthShapeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimedMouthShape.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimedMouthShapeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimedMouthShapeValidationError{}

// Validate checks the field values on MixTtsReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MixTtsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MixTtsReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MixTtsReqMultiError, or nil
// if none found.
func (m *MixTtsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *MixTtsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTtsreq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MixTtsReqValidationError{
					field:  "Ttsreq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MixTtsReqValidationError{
					field:  "Ttsreq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTtsreq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MixTtsReqValidationError{
				field:  "Ttsreq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MixTtsReqMultiError(errors)
	}

	return nil
}

// MixTtsReqMultiError is an error wrapping multiple validation errors returned
// by MixTtsReq.ValidateAll() if the designated constraints aren't met.
type MixTtsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MixTtsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MixTtsReqMultiError) AllErrors() []error { return m }

// MixTtsReqValidationError is the validation error returned by
// MixTtsReq.Validate if the designated constraints aren't met.
type MixTtsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MixTtsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MixTtsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MixTtsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MixTtsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MixTtsReqValidationError) ErrorName() string { return "MixTtsReqValidationError" }

// Error satisfies the builtin error interface
func (e MixTtsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMixTtsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MixTtsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MixTtsReqValidationError{}

// Validate checks the field values on SpeakerList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SpeakerList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpeakerList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SpeakerListMultiError, or
// nil if none found.
func (m *SpeakerList) ValidateAll() error {
	return m.validate(true)
}

func (m *SpeakerList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpeakerListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpeakerListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpeakerListValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SpeakerListMultiError(errors)
	}

	return nil
}

// SpeakerListMultiError is an error wrapping multiple validation errors
// returned by SpeakerList.ValidateAll() if the designated constraints aren't met.
type SpeakerListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpeakerListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpeakerListMultiError) AllErrors() []error { return m }

// SpeakerListValidationError is the validation error returned by
// SpeakerList.Validate if the designated constraints aren't met.
type SpeakerListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpeakerListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpeakerListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpeakerListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpeakerListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpeakerListValidationError) ErrorName() string { return "SpeakerListValidationError" }

// Error satisfies the builtin error interface
func (e SpeakerListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpeakerList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpeakerListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpeakerListValidationError{}

// Validate checks the field values on SpeakerParameter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SpeakerParameter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpeakerParameter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpeakerParameterMultiError, or nil if none found.
func (m *SpeakerParameter) ValidateAll() error {
	return m.validate(true)
}

func (m *SpeakerParameter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SpeakerId

	// no validation rules for SpeakerName

	// no validation rules for ParameterSpeakerName

	if len(errors) > 0 {
		return SpeakerParameterMultiError(errors)
	}

	return nil
}

// SpeakerParameterMultiError is an error wrapping multiple validation errors
// returned by SpeakerParameter.ValidateAll() if the designated constraints
// aren't met.
type SpeakerParameterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpeakerParameterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpeakerParameterMultiError) AllErrors() []error { return m }

// SpeakerParameterValidationError is the validation error returned by
// SpeakerParameter.Validate if the designated constraints aren't met.
type SpeakerParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpeakerParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpeakerParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpeakerParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpeakerParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpeakerParameterValidationError) ErrorName() string { return "SpeakerParameterValidationError" }

// Error satisfies the builtin error interface
func (e SpeakerParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpeakerParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpeakerParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpeakerParameterValidationError{}
