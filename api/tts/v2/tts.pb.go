// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: tts/v2/tts.proto

package v2

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClientVersion int32

const (
	ClientVersion_invalid ClientVersion = 0
	ClientVersion_version ClientVersion = 3
)

// Enum value maps for ClientVersion.
var (
	ClientVersion_name = map[int32]string{
		0: "invalid",
		3: "version",
	}
	ClientVersion_value = map[string]int32{
		"invalid": 0,
		"version": 3,
	}
)

func (x ClientVersion) Enum() *ClientVersion {
	p := new(ClientVersion)
	*p = x
	return p
}

func (x ClientVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_tts_v2_tts_proto_enumTypes[0].Descriptor()
}

func (ClientVersion) Type() protoreflect.EnumType {
	return &file_tts_v2_tts_proto_enumTypes[0]
}

func (x ClientVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientVersion.Descriptor instead.
func (ClientVersion) EnumDescriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{0}
}

type TtsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text                 string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`                                                               // 具体需要合成的文本，支持带json
	Speed                string `protobuf:"bytes,2,opt,name=speed,proto3" json:"speed,omitempty"`                                                             // 取值范围请用 GetTtsConfig SpeedList
	Volume               string `protobuf:"bytes,3,opt,name=volume,proto3" json:"volume,omitempty"`                                                           // 取值范围请用 GetTtsConfig VolumeList
	Pitch                string `protobuf:"bytes,4,opt,name=pitch,proto3" json:"pitch,omitempty"`                                                             // 取值范围请用 GetTtsConfig PitchList.Name
	Emotions             string `protobuf:"bytes,5,opt,name=emotions,proto3" json:"emotions,omitempty"`                                                       // 如果该发音人支持情感，取值范围请用 GetTtsConfig EmotionList.Name，如果不支持请传""，否则会报错
	ParameterSpeakerName string `protobuf:"bytes,6,opt,name=parameter_speaker_name,json=parameterSpeakerName,proto3" json:"parameter_speaker_name,omitempty"` // 取值范围请用 GetTtsConfig函数的返回Speakerlist.parameterSpeakerName
	// Deprecated: Do not use.
	ParameterDigitalPerson string            `protobuf:"bytes,7,opt,name=parameter_digital_person,json=parameterDigitalPerson,proto3" json:"parameter_digital_person,omitempty"`                                                            // **********数字人形象，  (废弃不用)  *******************
	ParameterFlag          map[string]string `protobuf:"bytes,8,rep,name=parameter_flag,json=parameterFlag,proto3" json:"parameter_flag,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 额外信息参数，口型key:mouth,字符串"true"或者"false"、动作key:movement,value的取值范围参考GetTtsConfig-MessageMovement.name、表情key:expression,value的取值范围参考GetTtsConfig-MessageExpression.name
	TraceId                string            `protobuf:"bytes,9,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	RootTraceId            string            `protobuf:"bytes,10,opt,name=root_trace_id,json=rootTraceId,proto3" json:"root_trace_id,omitempty"`
	Version                ClientVersion     `protobuf:"varint,100,opt,name=version,proto3,enum=ttsschema.ClientVersion" json:"version,omitempty"`
}

func (x *TtsReq) Reset() {
	*x = TtsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TtsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TtsReq) ProtoMessage() {}

func (x *TtsReq) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TtsReq.ProtoReflect.Descriptor instead.
func (*TtsReq) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{0}
}

func (x *TtsReq) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TtsReq) GetSpeed() string {
	if x != nil {
		return x.Speed
	}
	return ""
}

func (x *TtsReq) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

func (x *TtsReq) GetPitch() string {
	if x != nil {
		return x.Pitch
	}
	return ""
}

func (x *TtsReq) GetEmotions() string {
	if x != nil {
		return x.Emotions
	}
	return ""
}

func (x *TtsReq) GetParameterSpeakerName() string {
	if x != nil {
		return x.ParameterSpeakerName
	}
	return ""
}

// Deprecated: Do not use.
func (x *TtsReq) GetParameterDigitalPerson() string {
	if x != nil {
		return x.ParameterDigitalPerson
	}
	return ""
}

func (x *TtsReq) GetParameterFlag() map[string]string {
	if x != nil {
		return x.ParameterFlag
	}
	return nil
}

func (x *TtsReq) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *TtsReq) GetRootTraceId() string {
	if x != nil {
		return x.RootTraceId
	}
	return ""
}

func (x *TtsReq) GetVersion() ClientVersion {
	if x != nil {
		return x.Version
	}
	return ClientVersion_invalid
}

type TtsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32  `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"` // 错误码，非0为错误，0为正确
	Status    int32  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`                        // 合成状态，1.开始，2.中间，3，结束
	ErrorMsg  string `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`     // 错误信息正确为空，不正确具体字符串
	// Types that are assignable to ResultOneof:
	//	*TtsRes_SynthesizedAudio
	//	*TtsRes_DebugInfo
	//	*TtsRes_ActionElement
	//	*TtsRes_ConfigText
	//	*TtsRes_TimeMouthShapes
	//	*TtsRes_Expression
	//	*TtsRes_BodyMovement
	ResultOneof isTtsRes_ResultOneof `protobuf_oneof:"result_oneof"`
}

func (x *TtsRes) Reset() {
	*x = TtsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TtsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TtsRes) ProtoMessage() {}

func (x *TtsRes) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TtsRes.ProtoReflect.Descriptor instead.
func (*TtsRes) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{1}
}

func (x *TtsRes) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *TtsRes) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TtsRes) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (m *TtsRes) GetResultOneof() isTtsRes_ResultOneof {
	if m != nil {
		return m.ResultOneof
	}
	return nil
}

func (x *TtsRes) GetSynthesizedAudio() *SynthesizedAudio {
	if x, ok := x.GetResultOneof().(*TtsRes_SynthesizedAudio); ok {
		return x.SynthesizedAudio
	}
	return nil
}

func (x *TtsRes) GetDebugInfo() *DebugInfo {
	if x, ok := x.GetResultOneof().(*TtsRes_DebugInfo); ok {
		return x.DebugInfo
	}
	return nil
}

func (x *TtsRes) GetActionElement() *ActionElement {
	if x, ok := x.GetResultOneof().(*TtsRes_ActionElement); ok {
		return x.ActionElement
	}
	return nil
}

func (x *TtsRes) GetConfigText() *ConfigAndText {
	if x, ok := x.GetResultOneof().(*TtsRes_ConfigText); ok {
		return x.ConfigText
	}
	return nil
}

func (x *TtsRes) GetTimeMouthShapes() *TimedMouthShapes {
	if x, ok := x.GetResultOneof().(*TtsRes_TimeMouthShapes); ok {
		return x.TimeMouthShapes
	}
	return nil
}

func (x *TtsRes) GetExpression() *Expression {
	if x, ok := x.GetResultOneof().(*TtsRes_Expression); ok {
		return x.Expression
	}
	return nil
}

func (x *TtsRes) GetBodyMovement() *BodyMovement {
	if x, ok := x.GetResultOneof().(*TtsRes_BodyMovement); ok {
		return x.BodyMovement
	}
	return nil
}

type isTtsRes_ResultOneof interface {
	isTtsRes_ResultOneof()
}

type TtsRes_SynthesizedAudio struct {
	SynthesizedAudio *SynthesizedAudio `protobuf:"bytes,4,opt,name=synthesized_audio,json=synthesizedAudio,proto3,oneof"` // 音频
}

type TtsRes_DebugInfo struct {
	DebugInfo *DebugInfo `protobuf:"bytes,5,opt,name=debug_info,json=debugInfo,proto3,oneof"` // 调试信息,当有debug_info时需要输出
}

type TtsRes_ActionElement struct {
	ActionElement *ActionElement `protobuf:"bytes,6,opt,name=action_element,json=actionElement,proto3,oneof"` // 基元数据
}

type TtsRes_ConfigText struct {
	ConfigText *ConfigAndText `protobuf:"bytes,7,opt,name=config_text,json=configText,proto3,oneof"` // 文本配置信息start时会返回
}

type TtsRes_TimeMouthShapes struct {
	TimeMouthShapes *TimedMouthShapes `protobuf:"bytes,8,opt,name=time_mouth_shapes,json=timeMouthShapes,proto3,oneof"` // 口型数据
}

type TtsRes_Expression struct {
	Expression *Expression `protobuf:"bytes,9,opt,name=expression,proto3,oneof"` // 表情数据
}

type TtsRes_BodyMovement struct {
	BodyMovement *BodyMovement `protobuf:"bytes,10,opt,name=body_movement,json=bodyMovement,proto3,oneof"` // 动作数据
}

func (*TtsRes_SynthesizedAudio) isTtsRes_ResultOneof() {}

func (*TtsRes_DebugInfo) isTtsRes_ResultOneof() {}

func (*TtsRes_ActionElement) isTtsRes_ResultOneof() {}

func (*TtsRes_ConfigText) isTtsRes_ResultOneof() {}

func (*TtsRes_TimeMouthShapes) isTtsRes_ResultOneof() {}

func (*TtsRes_Expression) isTtsRes_ResultOneof() {}

func (*TtsRes_BodyMovement) isTtsRes_ResultOneof() {}

// 音频流
type SynthesizedAudio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pcm           []byte      `protobuf:"bytes,1,opt,name=pcm,proto3" json:"pcm,omitempty"`                                           // pcm
	Coordinate    *Coordinate `protobuf:"bytes,2,opt,name=coordinate,proto3" json:"coordinate,omitempty"`                             // 坐标信息
	IsPunctuation int32       `protobuf:"varint,3,opt,name=is_punctuation,json=isPunctuation,proto3" json:"is_punctuation,omitempty"` // 是否标点1是标点
}

func (x *SynthesizedAudio) Reset() {
	*x = SynthesizedAudio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynthesizedAudio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynthesizedAudio) ProtoMessage() {}

func (x *SynthesizedAudio) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynthesizedAudio.ProtoReflect.Descriptor instead.
func (*SynthesizedAudio) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{2}
}

func (x *SynthesizedAudio) GetPcm() []byte {
	if x != nil {
		return x.Pcm
	}
	return nil
}

func (x *SynthesizedAudio) GetCoordinate() *Coordinate {
	if x != nil {
		return x.Coordinate
	}
	return nil
}

func (x *SynthesizedAudio) GetIsPunctuation() int32 {
	if x != nil {
		return x.IsPunctuation
	}
	return 0
}

// 调试信息
type DebugInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebugType string `protobuf:"bytes,1,opt,name=debug_type,json=debugType,proto3" json:"debug_type,omitempty"`
	Info      string `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *DebugInfo) Reset() {
	*x = DebugInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugInfo) ProtoMessage() {}

func (x *DebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugInfo.ProtoReflect.Descriptor instead.
func (*DebugInfo) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{3}
}

func (x *DebugInfo) GetDebugType() string {
	if x != nil {
		return x.DebugType
	}
	return ""
}

func (x *DebugInfo) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

// Action基元数据
type ActionElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType     int32       `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`             // actionType 基元类型，-100<action_type<100
	Url            string      `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`                                              // 基元数据的url
	OperationType  int32       `protobuf:"varint,3,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"`    // action操作类型，-100<operation_type<100
	Coordinate     *Coordinate `protobuf:"bytes,4,opt,name=coordinate,proto3" json:"coordinate,omitempty"`                                // 该数据的坐标信息
	RenderDuration int32       `protobuf:"varint,5,opt,name=render_duration,json=renderDuration,proto3" json:"render_duration,omitempty"` // render_duration 渲染时长（该值不应大于文件时长）单位ms，-1代表持续到指定文件结束，-2代表由coordinate的len_utf8部分决定时长
}

func (x *ActionElement) Reset() {
	*x = ActionElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionElement) ProtoMessage() {}

func (x *ActionElement) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionElement.ProtoReflect.Descriptor instead.
func (*ActionElement) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{4}
}

func (x *ActionElement) GetActionType() int32 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

func (x *ActionElement) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ActionElement) GetOperationType() int32 {
	if x != nil {
		return x.OperationType
	}
	return 0
}

func (x *ActionElement) GetCoordinate() *Coordinate {
	if x != nil {
		return x.Coordinate
	}
	return nil
}

func (x *ActionElement) GetRenderDuration() int32 {
	if x != nil {
		return x.RenderDuration
	}
	return 0
}

// 音频流
type ConfigAndText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text                   string                  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`                                                                     // 文本信息
	FacialExpressionConfig *FacialExpressionConfig `protobuf:"bytes,2,opt,name=facial_expression_config,json=facialExpressionConfig,proto3" json:"facial_expression_config,omitempty"` // 表情配置
	BodyMovementConfig     *BodyMovementConfig     `protobuf:"bytes,3,opt,name=body_movement_config,json=bodyMovementConfig,proto3" json:"body_movement_config,omitempty"`             // 动作配置
}

func (x *ConfigAndText) Reset() {
	*x = ConfigAndText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigAndText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigAndText) ProtoMessage() {}

func (x *ConfigAndText) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigAndText.ProtoReflect.Descriptor instead.
func (*ConfigAndText) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{5}
}

func (x *ConfigAndText) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ConfigAndText) GetFacialExpressionConfig() *FacialExpressionConfig {
	if x != nil {
		return x.FacialExpressionConfig
	}
	return nil
}

func (x *ConfigAndText) GetBodyMovementConfig() *BodyMovementConfig {
	if x != nil {
		return x.BodyMovementConfig
	}
	return nil
}

//
type FacialExpressionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameDim   int32   `protobuf:"varint,1,opt,name=frame_dim,json=frameDim,proto3" json:"frame_dim,omitempty"`          // 每帧的维度，即一帧由frameDim个float组成
	FrameDurMs float32 `protobuf:"fixed32,2,opt,name=frame_dur_ms,json=frameDurMs,proto3" json:"frame_dur_ms,omitempty"` // 每帧的持续时长
	MetaData   string  `protobuf:"bytes,3,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`           // 伴生数据的其他描述性信息(json)
}

func (x *FacialExpressionConfig) Reset() {
	*x = FacialExpressionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacialExpressionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacialExpressionConfig) ProtoMessage() {}

func (x *FacialExpressionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacialExpressionConfig.ProtoReflect.Descriptor instead.
func (*FacialExpressionConfig) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{6}
}

func (x *FacialExpressionConfig) GetFrameDim() int32 {
	if x != nil {
		return x.FrameDim
	}
	return 0
}

func (x *FacialExpressionConfig) GetFrameDurMs() float32 {
	if x != nil {
		return x.FrameDurMs
	}
	return 0
}

func (x *FacialExpressionConfig) GetMetaData() string {
	if x != nil {
		return x.MetaData
	}
	return ""
}

//
type BodyMovementConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameDim   int32   `protobuf:"varint,1,opt,name=frame_dim,json=frameDim,proto3" json:"frame_dim,omitempty"`          // 每帧的维度，即一帧由frameDim个float组成
	FrameDurMs float32 `protobuf:"fixed32,2,opt,name=frame_dur_ms,json=frameDurMs,proto3" json:"frame_dur_ms,omitempty"` // 每帧的持续时长
	MetaData   string  `protobuf:"bytes,3,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`           // 伴生数据的其他描述性信息(json)
}

func (x *BodyMovementConfig) Reset() {
	*x = BodyMovementConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyMovementConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyMovementConfig) ProtoMessage() {}

func (x *BodyMovementConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyMovementConfig.ProtoReflect.Descriptor instead.
func (*BodyMovementConfig) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{7}
}

func (x *BodyMovementConfig) GetFrameDim() int32 {
	if x != nil {
		return x.FrameDim
	}
	return 0
}

func (x *BodyMovementConfig) GetFrameDurMs() float32 {
	if x != nil {
		return x.FrameDurMs
	}
	return 0
}

func (x *BodyMovementConfig) GetMetaData() string {
	if x != nil {
		return x.MetaData
	}
	return ""
}

// 口型
type TimedMouthShapes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mouths      []*TimedMouthShape `protobuf:"bytes,1,rep,name=mouths,proto3" json:"mouths,omitempty"`                                  // 口型数据
	StartTimeMs float32            `protobuf:"fixed32,2,opt,name=start_time_ms,json=startTimeMs,proto3" json:"start_time_ms,omitempty"` // 该段口型的起始时间，单位ms
}

func (x *TimedMouthShapes) Reset() {
	*x = TimedMouthShapes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimedMouthShapes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimedMouthShapes) ProtoMessage() {}

func (x *TimedMouthShapes) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimedMouthShapes.ProtoReflect.Descriptor instead.
func (*TimedMouthShapes) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{8}
}

func (x *TimedMouthShapes) GetMouths() []*TimedMouthShape {
	if x != nil {
		return x.Mouths
	}
	return nil
}

func (x *TimedMouthShapes) GetStartTimeMs() float32 {
	if x != nil {
		return x.StartTimeMs
	}
	return 0
}

// 表情
type Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data        []float32 `protobuf:"fixed32,1,rep,packed,name=data,proto3" json:"data,omitempty"`                             // 具体的表情数据, frame_size*frame_dim,frame_dim见FacialExpressionConfig
	FrameSize   int32     `protobuf:"varint,2,opt,name=frame_size,json=frameSize,proto3" json:"frame_size,omitempty"`          // 表情帧数
	StartTimeMs float32   `protobuf:"fixed32,3,opt,name=start_time_ms,json=startTimeMs,proto3" json:"start_time_ms,omitempty"` // 起始时间，单位ms
}

func (x *Expression) Reset() {
	*x = Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{9}
}

func (x *Expression) GetData() []float32 {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Expression) GetFrameSize() int32 {
	if x != nil {
		return x.FrameSize
	}
	return 0
}

func (x *Expression) GetStartTimeMs() float32 {
	if x != nil {
		return x.StartTimeMs
	}
	return 0
}

// 动作
type BodyMovement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data        []float32 `protobuf:"fixed32,1,rep,packed,name=data,proto3" json:"data,omitempty"`                             // 具体动作数据，frame_dim*frame_size个float,frame_dim见BodyMovementConfig
	FrameSize   int32     `protobuf:"varint,2,opt,name=frame_size,json=frameSize,proto3" json:"frame_size,omitempty"`          // 动作帧数
	StartTimeMs float32   `protobuf:"fixed32,3,opt,name=start_time_ms,json=startTimeMs,proto3" json:"start_time_ms,omitempty"` // 起始时间，单位ms
}

func (x *BodyMovement) Reset() {
	*x = BodyMovement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyMovement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyMovement) ProtoMessage() {}

func (x *BodyMovement) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyMovement.ProtoReflect.Descriptor instead.
func (*BodyMovement) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{10}
}

func (x *BodyMovement) GetData() []float32 {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BodyMovement) GetFrameSize() int32 {
	if x != nil {
		return x.FrameSize
	}
	return 0
}

func (x *BodyMovement) GetStartTimeMs() float32 {
	if x != nil {
		return x.StartTimeMs
	}
	return 0
}

// 坐标信息
type Coordinate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Off   int32 `protobuf:"varint,1,opt,name=off,proto3" json:"off,omitempty"` // 文本起点
	Len   int32 `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"` // 文本长度
	Order int32 `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *Coordinate) Reset() {
	*x = Coordinate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coordinate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coordinate) ProtoMessage() {}

func (x *Coordinate) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coordinate.ProtoReflect.Descriptor instead.
func (*Coordinate) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{11}
}

func (x *Coordinate) GetOff() int32 {
	if x != nil {
		return x.Off
	}
	return 0
}

func (x *Coordinate) GetLen() int32 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *Coordinate) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type TimedMouthShape struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DurationUs uint64 `protobuf:"varint,1,opt,name=duration_us,json=durationUs,proto3" json:"duration_us,omitempty"` // 时间
	Mouth      int32  `protobuf:"varint,2,opt,name=mouth,proto3" json:"mouth,omitempty"`                             // 嘴型 enum MouthShape
}

func (x *TimedMouthShape) Reset() {
	*x = TimedMouthShape{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimedMouthShape) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimedMouthShape) ProtoMessage() {}

func (x *TimedMouthShape) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimedMouthShape.ProtoReflect.Descriptor instead.
func (*TimedMouthShape) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{12}
}

func (x *TimedMouthShape) GetDurationUs() uint64 {
	if x != nil {
		return x.DurationUs
	}
	return 0
}

func (x *TimedMouthShape) GetMouth() int32 {
	if x != nil {
		return x.Mouth
	}
	return 0
}

type VerVersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VerVersionReq) Reset() {
	*x = VerVersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerVersionReq) ProtoMessage() {}

func (x *VerVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerVersionReq.ProtoReflect.Descriptor instead.
func (*VerVersionReq) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{13}
}

type VerVersionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VerVersionRsp) Reset() {
	*x = VerVersionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerVersionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerVersionRsp) ProtoMessage() {}

func (x *VerVersionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerVersionRsp.ProtoReflect.Descriptor instead.
func (*VerVersionRsp) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{14}
}

func (x *VerVersionRsp) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type VerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VerReq) Reset() {
	*x = VerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerReq) ProtoMessage() {}

func (x *VerReq) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerReq.ProtoReflect.Descriptor instead.
func (*VerReq) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{15}
}

type RespGetTtsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpeakerList *SpeakerList      `protobuf:"bytes,1,opt,name=speaker_list,json=speakerList,proto3" json:"speaker_list,omitempty"` // 发音人列表
	SpeedList   []string          `protobuf:"bytes,2,rep,name=speed_list,json=speedList,proto3" json:"speed_list,omitempty"`       // SupportedSpeed
	VolumeList  []string          `protobuf:"bytes,3,rep,name=volume_list,json=volumeList,proto3" json:"volume_list,omitempty"`    // SupportedVolume
	PitchList   []*MessagePitch   `protobuf:"bytes,4,rep,name=pitch_list,json=pitchList,proto3" json:"pitch_list,omitempty"`       // SupportedPitch
	EmotionList []*MessageEmotion `protobuf:"bytes,5,rep,name=emotion_list,json=emotionList,proto3" json:"emotion_list,omitempty"` // SupportedEmotion
	// Deprecated: Do not use.
	DigitalPersonList []*MessageDigitalPerson `protobuf:"bytes,6,rep,name=digital_person_list,json=digitalPersonList,proto3" json:"digital_person_list,omitempty"` // DigitalPerson 废弃不用
	MovementList      []*MessageMovement      `protobuf:"bytes,7,rep,name=movement_list,json=movementList,proto3" json:"movement_list,omitempty"`                  // SupportedMovement  动作
	ExpressionList    []*MessageExpression    `protobuf:"bytes,8,rep,name=expression_list,json=expressionList,proto3" json:"expression_list,omitempty"`            // SupportedExpression 表情
}

func (x *RespGetTtsConfig) Reset() {
	*x = RespGetTtsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespGetTtsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespGetTtsConfig) ProtoMessage() {}

func (x *RespGetTtsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespGetTtsConfig.ProtoReflect.Descriptor instead.
func (*RespGetTtsConfig) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{16}
}

func (x *RespGetTtsConfig) GetSpeakerList() *SpeakerList {
	if x != nil {
		return x.SpeakerList
	}
	return nil
}

func (x *RespGetTtsConfig) GetSpeedList() []string {
	if x != nil {
		return x.SpeedList
	}
	return nil
}

func (x *RespGetTtsConfig) GetVolumeList() []string {
	if x != nil {
		return x.VolumeList
	}
	return nil
}

func (x *RespGetTtsConfig) GetPitchList() []*MessagePitch {
	if x != nil {
		return x.PitchList
	}
	return nil
}

func (x *RespGetTtsConfig) GetEmotionList() []*MessageEmotion {
	if x != nil {
		return x.EmotionList
	}
	return nil
}

// Deprecated: Do not use.
func (x *RespGetTtsConfig) GetDigitalPersonList() []*MessageDigitalPerson {
	if x != nil {
		return x.DigitalPersonList
	}
	return nil
}

func (x *RespGetTtsConfig) GetMovementList() []*MessageMovement {
	if x != nil {
		return x.MovementList
	}
	return nil
}

func (x *RespGetTtsConfig) GetExpressionList() []*MessageExpression {
	if x != nil {
		return x.ExpressionList
	}
	return nil
}

type SpeakerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*SpeakerParameter `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"` // 发音人列表
}

func (x *SpeakerList) Reset() {
	*x = SpeakerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeakerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerList) ProtoMessage() {}

func (x *SpeakerList) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerList.ProtoReflect.Descriptor instead.
func (*SpeakerList) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{17}
}

func (x *SpeakerList) GetList() []*SpeakerParameter {
	if x != nil {
		return x.List
	}
	return nil
}

type SpeakerParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	SpeakerId            int32  `protobuf:"varint,1,opt,name=speaker_id,json=speakerId,proto3" json:"speaker_id,omitempty"`                                   // 发音人id （废弃不用）
	SpeakerName          string `protobuf:"bytes,2,opt,name=speaker_name,json=speakerName,proto3" json:"speaker_name,omitempty"`                              // 发音人名字
	ParameterSpeakerName string `protobuf:"bytes,3,opt,name=parameter_speaker_name,json=parameterSpeakerName,proto3" json:"parameter_speaker_name,omitempty"` // 发音人英文名字
	IsSupportEmotion     bool   `protobuf:"varint,4,opt,name=is_support_emotion,json=isSupportEmotion,proto3" json:"is_support_emotion,omitempty"`            // 是否支持情感
	IsSupportMixedVoice  bool   `protobuf:"varint,5,opt,name=is_support_mixed_voice,json=isSupportMixedVoice,proto3" json:"is_support_mixed_voice,omitempty"` // 是否支持混合发音
}

func (x *SpeakerParameter) Reset() {
	*x = SpeakerParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeakerParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerParameter) ProtoMessage() {}

func (x *SpeakerParameter) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerParameter.ProtoReflect.Descriptor instead.
func (*SpeakerParameter) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{18}
}

// Deprecated: Do not use.
func (x *SpeakerParameter) GetSpeakerId() int32 {
	if x != nil {
		return x.SpeakerId
	}
	return 0
}

func (x *SpeakerParameter) GetSpeakerName() string {
	if x != nil {
		return x.SpeakerName
	}
	return ""
}

func (x *SpeakerParameter) GetParameterSpeakerName() string {
	if x != nil {
		return x.ParameterSpeakerName
	}
	return ""
}

func (x *SpeakerParameter) GetIsSupportEmotion() bool {
	if x != nil {
		return x.IsSupportEmotion
	}
	return false
}

func (x *SpeakerParameter) GetIsSupportMixedVoice() bool {
	if x != nil {
		return x.IsSupportMixedVoice
	}
	return false
}

type MessagePitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                  // 参数
	ChineseName string `protobuf:"bytes,3,opt,name=chinese_name,json=chineseName,proto3" json:"chinese_name,omitempty"` // 对应中文
}

func (x *MessagePitch) Reset() {
	*x = MessagePitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagePitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagePitch) ProtoMessage() {}

func (x *MessagePitch) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagePitch.ProtoReflect.Descriptor instead.
func (*MessagePitch) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{19}
}

func (x *MessagePitch) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MessagePitch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessagePitch) GetChineseName() string {
	if x != nil {
		return x.ChineseName
	}
	return ""
}

type MessageEmotion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                  // 参数
	ChineseName string `protobuf:"bytes,3,opt,name=chinese_name,json=chineseName,proto3" json:"chinese_name,omitempty"` // 对应中文
}

func (x *MessageEmotion) Reset() {
	*x = MessageEmotion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageEmotion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEmotion) ProtoMessage() {}

func (x *MessageEmotion) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEmotion.ProtoReflect.Descriptor instead.
func (*MessageEmotion) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{20}
}

func (x *MessageEmotion) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MessageEmotion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessageEmotion) GetChineseName() string {
	if x != nil {
		return x.ChineseName
	}
	return ""
}

type MessageDigitalPerson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                  // 参数
	ChineseName string `protobuf:"bytes,3,opt,name=chinese_name,json=chineseName,proto3" json:"chinese_name,omitempty"` // 对应中文
}

func (x *MessageDigitalPerson) Reset() {
	*x = MessageDigitalPerson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageDigitalPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageDigitalPerson) ProtoMessage() {}

func (x *MessageDigitalPerson) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageDigitalPerson.ProtoReflect.Descriptor instead.
func (*MessageDigitalPerson) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{21}
}

func (x *MessageDigitalPerson) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MessageDigitalPerson) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessageDigitalPerson) GetChineseName() string {
	if x != nil {
		return x.ChineseName
	}
	return ""
}

type MessageMovement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                  // 用于传参
	ChineseName string `protobuf:"bytes,2,opt,name=chinese_name,json=chineseName,proto3" json:"chinese_name,omitempty"` // 对应中文
}

func (x *MessageMovement) Reset() {
	*x = MessageMovement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageMovement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageMovement) ProtoMessage() {}

func (x *MessageMovement) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageMovement.ProtoReflect.Descriptor instead.
func (*MessageMovement) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{22}
}

func (x *MessageMovement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessageMovement) GetChineseName() string {
	if x != nil {
		return x.ChineseName
	}
	return ""
}

type MessageExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                  // 用于传参
	ChineseName string `protobuf:"bytes,2,opt,name=chinese_name,json=chineseName,proto3" json:"chinese_name,omitempty"` // 对应中文
}

func (x *MessageExpression) Reset() {
	*x = MessageExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageExpression) ProtoMessage() {}

func (x *MessageExpression) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageExpression.ProtoReflect.Descriptor instead.
func (*MessageExpression) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{23}
}

func (x *MessageExpression) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessageExpression) GetChineseName() string {
	if x != nil {
		return x.ChineseName
	}
	return ""
}

type RegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Expire  int32  `protobuf:"varint,2,opt,name=expire,proto3" json:"expire,omitempty"`
}

func (x *RegisterReq) Reset() {
	*x = RegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterReq) ProtoMessage() {}

func (x *RegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterReq.ProtoReflect.Descriptor instead.
func (*RegisterReq) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{24}
}

func (x *RegisterReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *RegisterReq) GetExpire() int32 {
	if x != nil {
		return x.Expire
	}
	return 0
}

type RegisterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *RegisterResp) Reset() {
	*x = RegisterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tts_v2_tts_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResp) ProtoMessage() {}

func (x *RegisterResp) ProtoReflect() protoreflect.Message {
	mi := &file_tts_v2_tts_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResp.ProtoReflect.Descriptor instead.
func (*RegisterResp) Descriptor() ([]byte, []int) {
	return file_tts_v2_tts_proto_rawDescGZIP(), []int{25}
}

func (x *RegisterResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

var File_tts_v2_tts_proto protoreflect.FileDescriptor

var file_tts_v2_tts_proto_rawDesc = []byte{
	0x0a, 0x10, 0x74, 0x74, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x09, 0x74, 0x74, 0x73, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x03, 0x0a, 0x06, 0x54, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x18, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x16, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x74, 0x74, 0x73, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x74, 0x73, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x40, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb3, 0x04, 0x0a, 0x06, 0x54, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x4a, 0x0a, 0x11, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x74, 0x73, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x48, 0x00, 0x52, 0x10, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x12, 0x35, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x74, 0x73, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x74, 0x73, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x74, 0x73, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x49, 0x0a, 0x11, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x74, 0x73, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4d, 0x6f, 0x75, 0x74, 0x68, 0x53, 0x68, 0x61,
	0x70, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x74, 0x68,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x74, 0x73,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3e, 0x0a, 0x0d, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x74, 0x73, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22,
	0x82, 0x01, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x63, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x70, 0x63, 0x6d, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x74, 0x73,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x6e, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x73, 0x50, 0x75, 0x6e, 0x63, 0x74, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x0a, 0x09, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0xc9, 0x01, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x35, 0x0a, 0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x74, 0x73, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xd1, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x6e, 0x64, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5b, 0x0a, 0x18, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x74, 0x73, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x16, 0x66, 0x61, 0x63,
	0x69, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x14, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6d, 0x6f, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x74, 0x73, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x42, 0x6f,
	0x64, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x12, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x74, 0x0a, 0x16, 0x46, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x4d, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x12, 0x42, 0x6f,
	0x64, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x12, 0x20, 0x0a,
	0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x4d, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6a, 0x0a, 0x10,
	0x54, 0x69, 0x6d, 0x65, 0x64, 0x4d, 0x6f, 0x75, 0x74, 0x68, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73,
	0x12, 0x32, 0x0a, 0x06, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x74, 0x74, 0x73, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x64, 0x4d, 0x6f, 0x75, 0x74, 0x68, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x06, 0x6d, 0x6f,
	0x75, 0x74, 0x68, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x22, 0x63, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x22, 0x65, 0x0a,
	0x0c, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x73, 0x22, 0x46, 0x0a, 0x0a, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x66, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6f, 0x66, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x48, 0x0a, 0x0f,
	0x54, 0x69, 0x6d, 0x65, 0x64, 0x4d, 0x6f, 0x75, 0x74, 0x68, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x22, 0x0f, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22, 0x29, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x08, 0x0a, 0x06, 0x56, 0x65, 0x72, 0x52, 0x65, 0x71, 0x22, 0xe0, 0x03, 0x0a,
	0x10, 0x52, 0x65, 0x73, 0x70, 0x47, 0x65, 0x74, 0x54, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x74, 0x73, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x0b, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0a,
	0x70, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x74, 0x74, 0x73, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x50, 0x69, 0x74, 0x63, 0x68, 0x52, 0x09, 0x70, 0x69, 0x74, 0x63, 0x68,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x74, 0x73,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x53, 0x0a, 0x13, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x74, 0x74, 0x73, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x6f, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x74, 0x74, 0x73, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6d, 0x6f, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x74, 0x73, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x3e, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74,
	0x74, 0x73, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0xf1, 0x01, 0x0a, 0x10, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x73, 0x70,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x16, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x78,
	0x65, 0x64, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x69, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x22, 0x55, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x69,
	0x74, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x0e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x48, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x11,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3f, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x22, 0x24, 0x0a, 0x0c, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2a,
	0x29, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x0b, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x32, 0xe0, 0x02, 0x0a, 0x0d, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x69, 0x6e, 0x64, 0x73, 0x54, 0x54, 0x53, 0x12, 0x30, 0x0a, 0x04,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x11, 0x2e, 0x74, 0x74, 0x73, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x54, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x74, 0x74, 0x73, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x54, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x60,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x74,
	0x74, 0x73, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x74, 0x74, 0x73, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70,
	0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2f, 0x74, 0x74, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x5d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x11, 0x2e, 0x74, 0x74, 0x73, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x74, 0x74, 0x73, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x47, 0x65, 0x74, 0x54, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2f, 0x74, 0x74, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x5c, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x74, 0x74,
	0x73, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x74, 0x74, 0x73, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2f, 0x74, 0x74,
	0x73, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x42, 0x1a, 0x5a,
	0x18, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2d, 0x74, 0x74, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x74, 0x74, 0x73, 0x2f, 0x76, 0x32, 0x3b, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_tts_v2_tts_proto_rawDescOnce sync.Once
	file_tts_v2_tts_proto_rawDescData = file_tts_v2_tts_proto_rawDesc
)

func file_tts_v2_tts_proto_rawDescGZIP() []byte {
	file_tts_v2_tts_proto_rawDescOnce.Do(func() {
		file_tts_v2_tts_proto_rawDescData = protoimpl.X.CompressGZIP(file_tts_v2_tts_proto_rawDescData)
	})
	return file_tts_v2_tts_proto_rawDescData
}

var file_tts_v2_tts_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tts_v2_tts_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_tts_v2_tts_proto_goTypes = []interface{}{
	(ClientVersion)(0),             // 0: ttsschema.ClientVersion
	(*TtsReq)(nil),                 // 1: ttsschema.TtsReq
	(*TtsRes)(nil),                 // 2: ttsschema.TtsRes
	(*SynthesizedAudio)(nil),       // 3: ttsschema.SynthesizedAudio
	(*DebugInfo)(nil),              // 4: ttsschema.DebugInfo
	(*ActionElement)(nil),          // 5: ttsschema.ActionElement
	(*ConfigAndText)(nil),          // 6: ttsschema.ConfigAndText
	(*FacialExpressionConfig)(nil), // 7: ttsschema.FacialExpressionConfig
	(*BodyMovementConfig)(nil),     // 8: ttsschema.BodyMovementConfig
	(*TimedMouthShapes)(nil),       // 9: ttsschema.TimedMouthShapes
	(*Expression)(nil),             // 10: ttsschema.Expression
	(*BodyMovement)(nil),           // 11: ttsschema.BodyMovement
	(*Coordinate)(nil),             // 12: ttsschema.Coordinate
	(*TimedMouthShape)(nil),        // 13: ttsschema.TimedMouthShape
	(*VerVersionReq)(nil),          // 14: ttsschema.VerVersionReq
	(*VerVersionRsp)(nil),          // 15: ttsschema.VerVersionRsp
	(*VerReq)(nil),                 // 16: ttsschema.VerReq
	(*RespGetTtsConfig)(nil),       // 17: ttsschema.RespGetTtsConfig
	(*SpeakerList)(nil),            // 18: ttsschema.SpeakerList
	(*SpeakerParameter)(nil),       // 19: ttsschema.SpeakerParameter
	(*MessagePitch)(nil),           // 20: ttsschema.MessagePitch
	(*MessageEmotion)(nil),         // 21: ttsschema.MessageEmotion
	(*MessageDigitalPerson)(nil),   // 22: ttsschema.MessageDigitalPerson
	(*MessageMovement)(nil),        // 23: ttsschema.MessageMovement
	(*MessageExpression)(nil),      // 24: ttsschema.MessageExpression
	(*RegisterReq)(nil),            // 25: ttsschema.RegisterReq
	(*RegisterResp)(nil),           // 26: ttsschema.RegisterResp
	nil,                            // 27: ttsschema.TtsReq.ParameterFlagEntry
}
var file_tts_v2_tts_proto_depIdxs = []int32{
	27, // 0: ttsschema.TtsReq.parameter_flag:type_name -> ttsschema.TtsReq.ParameterFlagEntry
	0,  // 1: ttsschema.TtsReq.version:type_name -> ttsschema.ClientVersion
	3,  // 2: ttsschema.TtsRes.synthesized_audio:type_name -> ttsschema.SynthesizedAudio
	4,  // 3: ttsschema.TtsRes.debug_info:type_name -> ttsschema.DebugInfo
	5,  // 4: ttsschema.TtsRes.action_element:type_name -> ttsschema.ActionElement
	6,  // 5: ttsschema.TtsRes.config_text:type_name -> ttsschema.ConfigAndText
	9,  // 6: ttsschema.TtsRes.time_mouth_shapes:type_name -> ttsschema.TimedMouthShapes
	10, // 7: ttsschema.TtsRes.expression:type_name -> ttsschema.Expression
	11, // 8: ttsschema.TtsRes.body_movement:type_name -> ttsschema.BodyMovement
	12, // 9: ttsschema.SynthesizedAudio.coordinate:type_name -> ttsschema.Coordinate
	12, // 10: ttsschema.ActionElement.coordinate:type_name -> ttsschema.Coordinate
	7,  // 11: ttsschema.ConfigAndText.facial_expression_config:type_name -> ttsschema.FacialExpressionConfig
	8,  // 12: ttsschema.ConfigAndText.body_movement_config:type_name -> ttsschema.BodyMovementConfig
	13, // 13: ttsschema.TimedMouthShapes.mouths:type_name -> ttsschema.TimedMouthShape
	18, // 14: ttsschema.RespGetTtsConfig.speaker_list:type_name -> ttsschema.SpeakerList
	20, // 15: ttsschema.RespGetTtsConfig.pitch_list:type_name -> ttsschema.MessagePitch
	21, // 16: ttsschema.RespGetTtsConfig.emotion_list:type_name -> ttsschema.MessageEmotion
	22, // 17: ttsschema.RespGetTtsConfig.digital_person_list:type_name -> ttsschema.MessageDigitalPerson
	23, // 18: ttsschema.RespGetTtsConfig.movement_list:type_name -> ttsschema.MessageMovement
	24, // 19: ttsschema.RespGetTtsConfig.expression_list:type_name -> ttsschema.MessageExpression
	19, // 20: ttsschema.SpeakerList.list:type_name -> ttsschema.SpeakerParameter
	1,  // 21: ttsschema.CloudMindsTTS.Call:input_type -> ttsschema.TtsReq
	14, // 22: ttsschema.CloudMindsTTS.GetVersion:input_type -> ttsschema.VerVersionReq
	16, // 23: ttsschema.CloudMindsTTS.GetTtsConfig:input_type -> ttsschema.VerReq
	25, // 24: ttsschema.CloudMindsTTS.Register:input_type -> ttsschema.RegisterReq
	2,  // 25: ttsschema.CloudMindsTTS.Call:output_type -> ttsschema.TtsRes
	15, // 26: ttsschema.CloudMindsTTS.GetVersion:output_type -> ttsschema.VerVersionRsp
	17, // 27: ttsschema.CloudMindsTTS.GetTtsConfig:output_type -> ttsschema.RespGetTtsConfig
	26, // 28: ttsschema.CloudMindsTTS.Register:output_type -> ttsschema.RegisterResp
	25, // [25:29] is the sub-list for method output_type
	21, // [21:25] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_tts_v2_tts_proto_init() }
func file_tts_v2_tts_proto_init() {
	if File_tts_v2_tts_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tts_v2_tts_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TtsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TtsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynthesizedAudio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigAndText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacialExpressionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyMovementConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimedMouthShapes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyMovement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coordinate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimedMouthShape); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerVersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerVersionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespGetTtsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeakerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeakerParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagePitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageEmotion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageDigitalPerson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageMovement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tts_v2_tts_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tts_v2_tts_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*TtsRes_SynthesizedAudio)(nil),
		(*TtsRes_DebugInfo)(nil),
		(*TtsRes_ActionElement)(nil),
		(*TtsRes_ConfigText)(nil),
		(*TtsRes_TimeMouthShapes)(nil),
		(*TtsRes_Expression)(nil),
		(*TtsRes_BodyMovement)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tts_v2_tts_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tts_v2_tts_proto_goTypes,
		DependencyIndexes: file_tts_v2_tts_proto_depIdxs,
		EnumInfos:         file_tts_v2_tts_proto_enumTypes,
		MessageInfos:      file_tts_v2_tts_proto_msgTypes,
	}.Build()
	File_tts_v2_tts_proto = out.File
	file_tts_v2_tts_proto_rawDesc = nil
	file_tts_v2_tts_proto_goTypes = nil
	file_tts_v2_tts_proto_depIdxs = nil
}
