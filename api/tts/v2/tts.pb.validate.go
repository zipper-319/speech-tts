// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tts/v2/tts.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TtsReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TtsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TtsReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TtsReqMultiError, or nil if none found.
func (m *TtsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *TtsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Text

	// no validation rules for Speed

	// no validation rules for Volume

	// no validation rules for Pitch

	// no validation rules for Emotions

	// no validation rules for ParameterSpeakerName

	// no validation rules for ParameterDigitalPerson

	// no validation rules for ParameterFlag

	// no validation rules for TraceId

	// no validation rules for RootTraceId

	// no validation rules for Language

	// no validation rules for Userspace

	// no validation rules for Version

	if len(errors) > 0 {
		return TtsReqMultiError(errors)
	}

	return nil
}

// TtsReqMultiError is an error wrapping multiple validation errors returned by
// TtsReq.ValidateAll() if the designated constraints aren't met.
type TtsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TtsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TtsReqMultiError) AllErrors() []error { return m }

// TtsReqValidationError is the validation error returned by TtsReq.Validate if
// the designated constraints aren't met.
type TtsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TtsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TtsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TtsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TtsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TtsReqValidationError) ErrorName() string { return "TtsReqValidationError" }

// Error satisfies the builtin error interface
func (e TtsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTtsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TtsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TtsReqValidationError{}

// Validate checks the field values on TtsRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TtsRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TtsRes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TtsResMultiError, or nil if none found.
func (m *TtsRes) ValidateAll() error {
	return m.validate(true)
}

func (m *TtsRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ErrorCode

	// no validation rules for Status

	// no validation rules for ErrorMsg

	switch v := m.ResultOneof.(type) {
	case *TtsRes_SynthesizedAudio:
		if v == nil {
			err := TtsResValidationError{
				field:  "ResultOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSynthesizedAudio()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TtsResValidationError{
						field:  "SynthesizedAudio",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TtsResValidationError{
						field:  "SynthesizedAudio",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSynthesizedAudio()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TtsResValidationError{
					field:  "SynthesizedAudio",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TtsRes_DebugInfo:
		if v == nil {
			err := TtsResValidationError{
				field:  "ResultOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDebugInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TtsResValidationError{
						field:  "DebugInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TtsResValidationError{
						field:  "DebugInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDebugInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TtsResValidationError{
					field:  "DebugInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TtsRes_ActionElement:
		if v == nil {
			err := TtsResValidationError{
				field:  "ResultOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetActionElement()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TtsResValidationError{
						field:  "ActionElement",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TtsResValidationError{
						field:  "ActionElement",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetActionElement()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TtsResValidationError{
					field:  "ActionElement",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TtsRes_ConfigText:
		if v == nil {
			err := TtsResValidationError{
				field:  "ResultOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetConfigText()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TtsResValidationError{
						field:  "ConfigText",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TtsResValidationError{
						field:  "ConfigText",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConfigText()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TtsResValidationError{
					field:  "ConfigText",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TtsRes_TimeMouthShapes:
		if v == nil {
			err := TtsResValidationError{
				field:  "ResultOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTimeMouthShapes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TtsResValidationError{
						field:  "TimeMouthShapes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TtsResValidationError{
						field:  "TimeMouthShapes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTimeMouthShapes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TtsResValidationError{
					field:  "TimeMouthShapes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TtsRes_Expression:
		if v == nil {
			err := TtsResValidationError{
				field:  "ResultOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExpression()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TtsResValidationError{
						field:  "Expression",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TtsResValidationError{
						field:  "Expression",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExpression()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TtsResValidationError{
					field:  "Expression",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TtsRes_BodyMovement:
		if v == nil {
			err := TtsResValidationError{
				field:  "ResultOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBodyMovement()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TtsResValidationError{
						field:  "BodyMovement",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TtsResValidationError{
						field:  "BodyMovement",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBodyMovement()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TtsResValidationError{
					field:  "BodyMovement",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TtsResMultiError(errors)
	}

	return nil
}

// TtsResMultiError is an error wrapping multiple validation errors returned by
// TtsRes.ValidateAll() if the designated constraints aren't met.
type TtsResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TtsResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TtsResMultiError) AllErrors() []error { return m }

// TtsResValidationError is the validation error returned by TtsRes.Validate if
// the designated constraints aren't met.
type TtsResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TtsResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TtsResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TtsResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TtsResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TtsResValidationError) ErrorName() string { return "TtsResValidationError" }

// Error satisfies the builtin error interface
func (e TtsResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTtsRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TtsResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TtsResValidationError{}

// Validate checks the field values on SynthesizedAudio with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SynthesizedAudio) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SynthesizedAudio with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SynthesizedAudioMultiError, or nil if none found.
func (m *SynthesizedAudio) ValidateAll() error {
	return m.validate(true)
}

func (m *SynthesizedAudio) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pcm

	if all {
		switch v := interface{}(m.GetCoordinate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SynthesizedAudioValidationError{
					field:  "Coordinate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SynthesizedAudioValidationError{
					field:  "Coordinate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCoordinate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SynthesizedAudioValidationError{
				field:  "Coordinate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsPunctuation

	if len(errors) > 0 {
		return SynthesizedAudioMultiError(errors)
	}

	return nil
}

// SynthesizedAudioMultiError is an error wrapping multiple validation errors
// returned by SynthesizedAudio.ValidateAll() if the designated constraints
// aren't met.
type SynthesizedAudioMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SynthesizedAudioMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SynthesizedAudioMultiError) AllErrors() []error { return m }

// SynthesizedAudioValidationError is the validation error returned by
// SynthesizedAudio.Validate if the designated constraints aren't met.
type SynthesizedAudioValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SynthesizedAudioValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SynthesizedAudioValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SynthesizedAudioValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SynthesizedAudioValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SynthesizedAudioValidationError) ErrorName() string { return "SynthesizedAudioValidationError" }

// Error satisfies the builtin error interface
func (e SynthesizedAudioValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSynthesizedAudio.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SynthesizedAudioValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SynthesizedAudioValidationError{}

// Validate checks the field values on DebugInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DebugInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DebugInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DebugInfoMultiError, or nil
// if none found.
func (m *DebugInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *DebugInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DebugType

	// no validation rules for Info

	if len(errors) > 0 {
		return DebugInfoMultiError(errors)
	}

	return nil
}

// DebugInfoMultiError is an error wrapping multiple validation errors returned
// by DebugInfo.ValidateAll() if the designated constraints aren't met.
type DebugInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DebugInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DebugInfoMultiError) AllErrors() []error { return m }

// DebugInfoValidationError is the validation error returned by
// DebugInfo.Validate if the designated constraints aren't met.
type DebugInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebugInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebugInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebugInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebugInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebugInfoValidationError) ErrorName() string { return "DebugInfoValidationError" }

// Error satisfies the builtin error interface
func (e DebugInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebugInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebugInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebugInfoValidationError{}

// Validate checks the field values on ActionElement with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ActionElement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActionElement with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ActionElementMultiError, or
// nil if none found.
func (m *ActionElement) ValidateAll() error {
	return m.validate(true)
}

func (m *ActionElement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionType

	// no validation rules for Url

	// no validation rules for OperationType

	if all {
		switch v := interface{}(m.GetCoordinate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActionElementValidationError{
					field:  "Coordinate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActionElementValidationError{
					field:  "Coordinate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCoordinate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActionElementValidationError{
				field:  "Coordinate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RenderDuration

	if len(errors) > 0 {
		return ActionElementMultiError(errors)
	}

	return nil
}

// ActionElementMultiError is an error wrapping multiple validation errors
// returned by ActionElement.ValidateAll() if the designated constraints
// aren't met.
type ActionElementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionElementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionElementMultiError) AllErrors() []error { return m }

// ActionElementValidationError is the validation error returned by
// ActionElement.Validate if the designated constraints aren't met.
type ActionElementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionElementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionElementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionElementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionElementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionElementValidationError) ErrorName() string { return "ActionElementValidationError" }

// Error satisfies the builtin error interface
func (e ActionElementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionElement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionElementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionElementValidationError{}

// Validate checks the field values on ConfigAndText with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConfigAndText) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigAndText with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConfigAndTextMultiError, or
// nil if none found.
func (m *ConfigAndText) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigAndText) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Text

	if all {
		switch v := interface{}(m.GetFacialExpressionConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigAndTextValidationError{
					field:  "FacialExpressionConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigAndTextValidationError{
					field:  "FacialExpressionConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFacialExpressionConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigAndTextValidationError{
				field:  "FacialExpressionConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBodyMovementConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigAndTextValidationError{
					field:  "BodyMovementConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigAndTextValidationError{
					field:  "BodyMovementConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBodyMovementConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigAndTextValidationError{
				field:  "BodyMovementConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfigAndTextMultiError(errors)
	}

	return nil
}

// ConfigAndTextMultiError is an error wrapping multiple validation errors
// returned by ConfigAndText.ValidateAll() if the designated constraints
// aren't met.
type ConfigAndTextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigAndTextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigAndTextMultiError) AllErrors() []error { return m }

// ConfigAndTextValidationError is the validation error returned by
// ConfigAndText.Validate if the designated constraints aren't met.
type ConfigAndTextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigAndTextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigAndTextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigAndTextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigAndTextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigAndTextValidationError) ErrorName() string { return "ConfigAndTextValidationError" }

// Error satisfies the builtin error interface
func (e ConfigAndTextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigAndText.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigAndTextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigAndTextValidationError{}

// Validate checks the field values on FacialExpressionConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FacialExpressionConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FacialExpressionConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FacialExpressionConfigMultiError, or nil if none found.
func (m *FacialExpressionConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *FacialExpressionConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FrameDim

	// no validation rules for FrameDurMs

	// no validation rules for MetaData

	if len(errors) > 0 {
		return FacialExpressionConfigMultiError(errors)
	}

	return nil
}

// FacialExpressionConfigMultiError is an error wrapping multiple validation
// errors returned by FacialExpressionConfig.ValidateAll() if the designated
// constraints aren't met.
type FacialExpressionConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FacialExpressionConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FacialExpressionConfigMultiError) AllErrors() []error { return m }

// FacialExpressionConfigValidationError is the validation error returned by
// FacialExpressionConfig.Validate if the designated constraints aren't met.
type FacialExpressionConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FacialExpressionConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FacialExpressionConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FacialExpressionConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FacialExpressionConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FacialExpressionConfigValidationError) ErrorName() string {
	return "FacialExpressionConfigValidationError"
}

// Error satisfies the builtin error interface
func (e FacialExpressionConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFacialExpressionConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FacialExpressionConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FacialExpressionConfigValidationError{}

// Validate checks the field values on BodyMovementConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BodyMovementConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BodyMovementConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BodyMovementConfigMultiError, or nil if none found.
func (m *BodyMovementConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *BodyMovementConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FrameDim

	// no validation rules for FrameDurMs

	// no validation rules for MetaData

	if len(errors) > 0 {
		return BodyMovementConfigMultiError(errors)
	}

	return nil
}

// BodyMovementConfigMultiError is an error wrapping multiple validation errors
// returned by BodyMovementConfig.ValidateAll() if the designated constraints
// aren't met.
type BodyMovementConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BodyMovementConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BodyMovementConfigMultiError) AllErrors() []error { return m }

// BodyMovementConfigValidationError is the validation error returned by
// BodyMovementConfig.Validate if the designated constraints aren't met.
type BodyMovementConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BodyMovementConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BodyMovementConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BodyMovementConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BodyMovementConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BodyMovementConfigValidationError) ErrorName() string {
	return "BodyMovementConfigValidationError"
}

// Error satisfies the builtin error interface
func (e BodyMovementConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBodyMovementConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BodyMovementConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BodyMovementConfigValidationError{}

// Validate checks the field values on TimedMouthShapes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TimedMouthShapes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimedMouthShapes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimedMouthShapesMultiError, or nil if none found.
func (m *TimedMouthShapes) ValidateAll() error {
	return m.validate(true)
}

func (m *TimedMouthShapes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMouths() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TimedMouthShapesValidationError{
						field:  fmt.Sprintf("Mouths[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TimedMouthShapesValidationError{
						field:  fmt.Sprintf("Mouths[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TimedMouthShapesValidationError{
					field:  fmt.Sprintf("Mouths[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for StartTimeMs

	if len(errors) > 0 {
		return TimedMouthShapesMultiError(errors)
	}

	return nil
}

// TimedMouthShapesMultiError is an error wrapping multiple validation errors
// returned by TimedMouthShapes.ValidateAll() if the designated constraints
// aren't met.
type TimedMouthShapesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimedMouthShapesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimedMouthShapesMultiError) AllErrors() []error { return m }

// TimedMouthShapesValidationError is the validation error returned by
// TimedMouthShapes.Validate if the designated constraints aren't met.
type TimedMouthShapesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimedMouthShapesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimedMouthShapesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimedMouthShapesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimedMouthShapesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimedMouthShapesValidationError) ErrorName() string { return "TimedMouthShapesValidationError" }

// Error satisfies the builtin error interface
func (e TimedMouthShapesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimedMouthShapes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimedMouthShapesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimedMouthShapesValidationError{}

// Validate checks the field values on Expression with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Expression) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Expression with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExpressionMultiError, or
// nil if none found.
func (m *Expression) ValidateAll() error {
	return m.validate(true)
}

func (m *Expression) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FrameSize

	// no validation rules for StartTimeMs

	if len(errors) > 0 {
		return ExpressionMultiError(errors)
	}

	return nil
}

// ExpressionMultiError is an error wrapping multiple validation errors
// returned by Expression.ValidateAll() if the designated constraints aren't met.
type ExpressionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpressionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpressionMultiError) AllErrors() []error { return m }

// ExpressionValidationError is the validation error returned by
// Expression.Validate if the designated constraints aren't met.
type ExpressionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpressionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpressionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpressionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpressionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpressionValidationError) ErrorName() string { return "ExpressionValidationError" }

// Error satisfies the builtin error interface
func (e ExpressionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpression.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpressionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpressionValidationError{}

// Validate checks the field values on BodyMovement with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BodyMovement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BodyMovement with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BodyMovementMultiError, or
// nil if none found.
func (m *BodyMovement) ValidateAll() error {
	return m.validate(true)
}

func (m *BodyMovement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FrameSize

	// no validation rules for StartTimeMs

	if len(errors) > 0 {
		return BodyMovementMultiError(errors)
	}

	return nil
}

// BodyMovementMultiError is an error wrapping multiple validation errors
// returned by BodyMovement.ValidateAll() if the designated constraints aren't met.
type BodyMovementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BodyMovementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BodyMovementMultiError) AllErrors() []error { return m }

// BodyMovementValidationError is the validation error returned by
// BodyMovement.Validate if the designated constraints aren't met.
type BodyMovementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BodyMovementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BodyMovementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BodyMovementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BodyMovementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BodyMovementValidationError) ErrorName() string { return "BodyMovementValidationError" }

// Error satisfies the builtin error interface
func (e BodyMovementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBodyMovement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BodyMovementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BodyMovementValidationError{}

// Validate checks the field values on Coordinate with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Coordinate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Coordinate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CoordinateMultiError, or
// nil if none found.
func (m *Coordinate) ValidateAll() error {
	return m.validate(true)
}

func (m *Coordinate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Off

	// no validation rules for Len

	// no validation rules for Order

	if len(errors) > 0 {
		return CoordinateMultiError(errors)
	}

	return nil
}

// CoordinateMultiError is an error wrapping multiple validation errors
// returned by Coordinate.ValidateAll() if the designated constraints aren't met.
type CoordinateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoordinateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoordinateMultiError) AllErrors() []error { return m }

// CoordinateValidationError is the validation error returned by
// Coordinate.Validate if the designated constraints aren't met.
type CoordinateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoordinateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoordinateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoordinateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoordinateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoordinateValidationError) ErrorName() string { return "CoordinateValidationError" }

// Error satisfies the builtin error interface
func (e CoordinateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoordinate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoordinateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoordinateValidationError{}

// Validate checks the field values on TimedMouthShape with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TimedMouthShape) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimedMouthShape with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimedMouthShapeMultiError, or nil if none found.
func (m *TimedMouthShape) ValidateAll() error {
	return m.validate(true)
}

func (m *TimedMouthShape) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DurationUs

	// no validation rules for Mouth

	if len(errors) > 0 {
		return TimedMouthShapeMultiError(errors)
	}

	return nil
}

// TimedMouthShapeMultiError is an error wrapping multiple validation errors
// returned by TimedMouthShape.ValidateAll() if the designated constraints
// aren't met.
type TimedMouthShapeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimedMouthShapeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimedMouthShapeMultiError) AllErrors() []error { return m }

// TimedMouthShapeValidationError is the validation error returned by
// TimedMouthShape.Validate if the designated constraints aren't met.
type TimedMouthShapeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimedMouthShapeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimedMouthShapeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimedMouthShapeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimedMouthShapeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimedMouthShapeValidationError) ErrorName() string { return "TimedMouthShapeValidationError" }

// Error satisfies the builtin error interface
func (e TimedMouthShapeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimedMouthShape.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimedMouthShapeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimedMouthShapeValidationError{}

// Validate checks the field values on VerVersionReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VerVersionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerVersionReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VerVersionReqMultiError, or
// nil if none found.
func (m *VerVersionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VerVersionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VerVersionReqMultiError(errors)
	}

	return nil
}

// VerVersionReqMultiError is an error wrapping multiple validation errors
// returned by VerVersionReq.ValidateAll() if the designated constraints
// aren't met.
type VerVersionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerVersionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerVersionReqMultiError) AllErrors() []error { return m }

// VerVersionReqValidationError is the validation error returned by
// VerVersionReq.Validate if the designated constraints aren't met.
type VerVersionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerVersionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerVersionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerVersionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerVersionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerVersionReqValidationError) ErrorName() string { return "VerVersionReqValidationError" }

// Error satisfies the builtin error interface
func (e VerVersionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerVersionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerVersionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerVersionReqValidationError{}

// Validate checks the field values on VerVersionRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VerVersionRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerVersionRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VerVersionRspMultiError, or
// nil if none found.
func (m *VerVersionRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *VerVersionRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if len(errors) > 0 {
		return VerVersionRspMultiError(errors)
	}

	return nil
}

// VerVersionRspMultiError is an error wrapping multiple validation errors
// returned by VerVersionRsp.ValidateAll() if the designated constraints
// aren't met.
type VerVersionRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerVersionRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerVersionRspMultiError) AllErrors() []error { return m }

// VerVersionRspValidationError is the validation error returned by
// VerVersionRsp.Validate if the designated constraints aren't met.
type VerVersionRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerVersionRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerVersionRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerVersionRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerVersionRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerVersionRspValidationError) ErrorName() string { return "VerVersionRspValidationError" }

// Error satisfies the builtin error interface
func (e VerVersionRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerVersionRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerVersionRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerVersionRspValidationError{}

// Validate checks the field values on VerReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VerReqMultiError, or nil if none found.
func (m *VerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VerReqMultiError(errors)
	}

	return nil
}

// VerReqMultiError is an error wrapping multiple validation errors returned by
// VerReq.ValidateAll() if the designated constraints aren't met.
type VerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerReqMultiError) AllErrors() []error { return m }

// VerReqValidationError is the validation error returned by VerReq.Validate if
// the designated constraints aren't met.
type VerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerReqValidationError) ErrorName() string { return "VerReqValidationError" }

// Error satisfies the builtin error interface
func (e VerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerReqValidationError{}

// Validate checks the field values on RespGetTtsConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RespGetTtsConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RespGetTtsConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RespGetTtsConfigMultiError, or nil if none found.
func (m *RespGetTtsConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *RespGetTtsConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSpeakerList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RespGetTtsConfigValidationError{
					field:  "SpeakerList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RespGetTtsConfigValidationError{
					field:  "SpeakerList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpeakerList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RespGetTtsConfigValidationError{
				field:  "SpeakerList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPitchList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RespGetTtsConfigValidationError{
						field:  fmt.Sprintf("PitchList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RespGetTtsConfigValidationError{
						field:  fmt.Sprintf("PitchList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RespGetTtsConfigValidationError{
					field:  fmt.Sprintf("PitchList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetEmotionList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RespGetTtsConfigValidationError{
						field:  fmt.Sprintf("EmotionList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RespGetTtsConfigValidationError{
						field:  fmt.Sprintf("EmotionList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RespGetTtsConfigValidationError{
					field:  fmt.Sprintf("EmotionList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDigitalPersonList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RespGetTtsConfigValidationError{
						field:  fmt.Sprintf("DigitalPersonList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RespGetTtsConfigValidationError{
						field:  fmt.Sprintf("DigitalPersonList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RespGetTtsConfigValidationError{
					field:  fmt.Sprintf("DigitalPersonList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMovementList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RespGetTtsConfigValidationError{
						field:  fmt.Sprintf("MovementList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RespGetTtsConfigValidationError{
						field:  fmt.Sprintf("MovementList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RespGetTtsConfigValidationError{
					field:  fmt.Sprintf("MovementList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetExpressionList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RespGetTtsConfigValidationError{
						field:  fmt.Sprintf("ExpressionList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RespGetTtsConfigValidationError{
						field:  fmt.Sprintf("ExpressionList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RespGetTtsConfigValidationError{
					field:  fmt.Sprintf("ExpressionList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RespGetTtsConfigMultiError(errors)
	}

	return nil
}

// RespGetTtsConfigMultiError is an error wrapping multiple validation errors
// returned by RespGetTtsConfig.ValidateAll() if the designated constraints
// aren't met.
type RespGetTtsConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RespGetTtsConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RespGetTtsConfigMultiError) AllErrors() []error { return m }

// RespGetTtsConfigValidationError is the validation error returned by
// RespGetTtsConfig.Validate if the designated constraints aren't met.
type RespGetTtsConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RespGetTtsConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RespGetTtsConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RespGetTtsConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RespGetTtsConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RespGetTtsConfigValidationError) ErrorName() string { return "RespGetTtsConfigValidationError" }

// Error satisfies the builtin error interface
func (e RespGetTtsConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRespGetTtsConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RespGetTtsConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RespGetTtsConfigValidationError{}

// Validate checks the field values on SpeakerList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SpeakerList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpeakerList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SpeakerListMultiError, or
// nil if none found.
func (m *SpeakerList) ValidateAll() error {
	return m.validate(true)
}

func (m *SpeakerList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpeakerListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpeakerListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpeakerListValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SpeakerListMultiError(errors)
	}

	return nil
}

// SpeakerListMultiError is an error wrapping multiple validation errors
// returned by SpeakerList.ValidateAll() if the designated constraints aren't met.
type SpeakerListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpeakerListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpeakerListMultiError) AllErrors() []error { return m }

// SpeakerListValidationError is the validation error returned by
// SpeakerList.Validate if the designated constraints aren't met.
type SpeakerListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpeakerListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpeakerListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpeakerListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpeakerListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpeakerListValidationError) ErrorName() string { return "SpeakerListValidationError" }

// Error satisfies the builtin error interface
func (e SpeakerListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpeakerList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpeakerListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpeakerListValidationError{}

// Validate checks the field values on SpeakerParameter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SpeakerParameter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpeakerParameter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpeakerParameterMultiError, or nil if none found.
func (m *SpeakerParameter) ValidateAll() error {
	return m.validate(true)
}

func (m *SpeakerParameter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SpeakerId

	// no validation rules for SpeakerName

	// no validation rules for ParameterSpeakerName

	// no validation rules for IsSupportEmotion

	// no validation rules for IsSupportMixedVoice

	// no validation rules for IsBelongClone

	if len(errors) > 0 {
		return SpeakerParameterMultiError(errors)
	}

	return nil
}

// SpeakerParameterMultiError is an error wrapping multiple validation errors
// returned by SpeakerParameter.ValidateAll() if the designated constraints
// aren't met.
type SpeakerParameterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpeakerParameterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpeakerParameterMultiError) AllErrors() []error { return m }

// SpeakerParameterValidationError is the validation error returned by
// SpeakerParameter.Validate if the designated constraints aren't met.
type SpeakerParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpeakerParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpeakerParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpeakerParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpeakerParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpeakerParameterValidationError) ErrorName() string { return "SpeakerParameterValidationError" }

// Error satisfies the builtin error interface
func (e SpeakerParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpeakerParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpeakerParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpeakerParameterValidationError{}

// Validate checks the field values on MessagePitch with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MessagePitch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessagePitch with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MessagePitchMultiError, or
// nil if none found.
func (m *MessagePitch) ValidateAll() error {
	return m.validate(true)
}

func (m *MessagePitch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for ChineseName

	if len(errors) > 0 {
		return MessagePitchMultiError(errors)
	}

	return nil
}

// MessagePitchMultiError is an error wrapping multiple validation errors
// returned by MessagePitch.ValidateAll() if the designated constraints aren't met.
type MessagePitchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessagePitchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessagePitchMultiError) AllErrors() []error { return m }

// MessagePitchValidationError is the validation error returned by
// MessagePitch.Validate if the designated constraints aren't met.
type MessagePitchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessagePitchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessagePitchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessagePitchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessagePitchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessagePitchValidationError) ErrorName() string { return "MessagePitchValidationError" }

// Error satisfies the builtin error interface
func (e MessagePitchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessagePitch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessagePitchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessagePitchValidationError{}

// Validate checks the field values on MessageEmotion with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MessageEmotion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageEmotion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MessageEmotionMultiError,
// or nil if none found.
func (m *MessageEmotion) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageEmotion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for ChineseName

	if len(errors) > 0 {
		return MessageEmotionMultiError(errors)
	}

	return nil
}

// MessageEmotionMultiError is an error wrapping multiple validation errors
// returned by MessageEmotion.ValidateAll() if the designated constraints
// aren't met.
type MessageEmotionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageEmotionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageEmotionMultiError) AllErrors() []error { return m }

// MessageEmotionValidationError is the validation error returned by
// MessageEmotion.Validate if the designated constraints aren't met.
type MessageEmotionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageEmotionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageEmotionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageEmotionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageEmotionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageEmotionValidationError) ErrorName() string { return "MessageEmotionValidationError" }

// Error satisfies the builtin error interface
func (e MessageEmotionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageEmotion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageEmotionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageEmotionValidationError{}

// Validate checks the field values on MessageDigitalPerson with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageDigitalPerson) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageDigitalPerson with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageDigitalPersonMultiError, or nil if none found.
func (m *MessageDigitalPerson) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageDigitalPerson) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for ChineseName

	if len(errors) > 0 {
		return MessageDigitalPersonMultiError(errors)
	}

	return nil
}

// MessageDigitalPersonMultiError is an error wrapping multiple validation
// errors returned by MessageDigitalPerson.ValidateAll() if the designated
// constraints aren't met.
type MessageDigitalPersonMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageDigitalPersonMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageDigitalPersonMultiError) AllErrors() []error { return m }

// MessageDigitalPersonValidationError is the validation error returned by
// MessageDigitalPerson.Validate if the designated constraints aren't met.
type MessageDigitalPersonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageDigitalPersonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageDigitalPersonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageDigitalPersonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageDigitalPersonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageDigitalPersonValidationError) ErrorName() string {
	return "MessageDigitalPersonValidationError"
}

// Error satisfies the builtin error interface
func (e MessageDigitalPersonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageDigitalPerson.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageDigitalPersonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageDigitalPersonValidationError{}

// Validate checks the field values on MessageMovement with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MessageMovement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageMovement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageMovementMultiError, or nil if none found.
func (m *MessageMovement) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageMovement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for ChineseName

	if len(errors) > 0 {
		return MessageMovementMultiError(errors)
	}

	return nil
}

// MessageMovementMultiError is an error wrapping multiple validation errors
// returned by MessageMovement.ValidateAll() if the designated constraints
// aren't met.
type MessageMovementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageMovementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageMovementMultiError) AllErrors() []error { return m }

// MessageMovementValidationError is the validation error returned by
// MessageMovement.Validate if the designated constraints aren't met.
type MessageMovementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageMovementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageMovementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageMovementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageMovementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageMovementValidationError) ErrorName() string { return "MessageMovementValidationError" }

// Error satisfies the builtin error interface
func (e MessageMovementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageMovement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageMovementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageMovementValidationError{}

// Validate checks the field values on MessageExpression with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MessageExpression) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageExpression with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageExpressionMultiError, or nil if none found.
func (m *MessageExpression) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageExpression) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for ChineseName

	if len(errors) > 0 {
		return MessageExpressionMultiError(errors)
	}

	return nil
}

// MessageExpressionMultiError is an error wrapping multiple validation errors
// returned by MessageExpression.ValidateAll() if the designated constraints
// aren't met.
type MessageExpressionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageExpressionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageExpressionMultiError) AllErrors() []error { return m }

// MessageExpressionValidationError is the validation error returned by
// MessageExpression.Validate if the designated constraints aren't met.
type MessageExpressionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageExpressionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageExpressionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageExpressionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageExpressionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageExpressionValidationError) ErrorName() string {
	return "MessageExpressionValidationError"
}

// Error satisfies the builtin error interface
func (e MessageExpressionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageExpression.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageExpressionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageExpressionValidationError{}

// Validate checks the field values on RegisterReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegisterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegisterReqMultiError, or
// nil if none found.
func (m *RegisterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Expire

	if len(errors) > 0 {
		return RegisterReqMultiError(errors)
	}

	return nil
}

// RegisterReqMultiError is an error wrapping multiple validation errors
// returned by RegisterReq.ValidateAll() if the designated constraints aren't met.
type RegisterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterReqMultiError) AllErrors() []error { return m }

// RegisterReqValidationError is the validation error returned by
// RegisterReq.Validate if the designated constraints aren't met.
type RegisterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterReqValidationError) ErrorName() string { return "RegisterReqValidationError" }

// Error satisfies the builtin error interface
func (e RegisterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterReqValidationError{}

// Validate checks the field values on RegisterResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegisterResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegisterRespMultiError, or
// nil if none found.
func (m *RegisterResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return RegisterRespMultiError(errors)
	}

	return nil
}

// RegisterRespMultiError is an error wrapping multiple validation errors
// returned by RegisterResp.ValidateAll() if the designated constraints aren't met.
type RegisterRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRespMultiError) AllErrors() []error { return m }

// RegisterRespValidationError is the validation error returned by
// RegisterResp.Validate if the designated constraints aren't met.
type RegisterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRespValidationError) ErrorName() string { return "RegisterRespValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRespValidationError{}

// Validate checks the field values on GetUserSpeakersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserSpeakersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserSpeakersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserSpeakersRequestMultiError, or nil if none found.
func (m *GetUserSpeakersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserSpeakersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TraceId

	// no validation rules for User

	if len(errors) > 0 {
		return GetUserSpeakersRequestMultiError(errors)
	}

	return nil
}

// GetUserSpeakersRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserSpeakersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserSpeakersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserSpeakersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserSpeakersRequestMultiError) AllErrors() []error { return m }

// GetUserSpeakersRequestValidationError is the validation error returned by
// GetUserSpeakersRequest.Validate if the designated constraints aren't met.
type GetUserSpeakersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserSpeakersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserSpeakersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserSpeakersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserSpeakersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserSpeakersRequestValidationError) ErrorName() string {
	return "GetUserSpeakersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserSpeakersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserSpeakersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserSpeakersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserSpeakersRequestValidationError{}

// Validate checks the field values on GetUserSpeakersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserSpeakersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserSpeakersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserSpeakersResponseMultiError, or nil if none found.
func (m *GetUserSpeakersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserSpeakersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserSpeakersResponseMultiError(errors)
	}

	return nil
}

// GetUserSpeakersResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserSpeakersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserSpeakersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserSpeakersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserSpeakersResponseMultiError) AllErrors() []error { return m }

// GetUserSpeakersResponseValidationError is the validation error returned by
// GetUserSpeakersResponse.Validate if the designated constraints aren't met.
type GetUserSpeakersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserSpeakersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserSpeakersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserSpeakersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserSpeakersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserSpeakersResponseValidationError) ErrorName() string {
	return "GetUserSpeakersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserSpeakersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserSpeakersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserSpeakersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserSpeakersResponseValidationError{}

// Validate checks the field values on GetTtsConfigByUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTtsConfigByUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTtsConfigByUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTtsConfigByUserRequestMultiError, or nil if none found.
func (m *GetTtsConfigByUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTtsConfigByUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TraceId

	// no validation rules for User

	if len(errors) > 0 {
		return GetTtsConfigByUserRequestMultiError(errors)
	}

	return nil
}

// GetTtsConfigByUserRequestMultiError is an error wrapping multiple validation
// errors returned by GetTtsConfigByUserRequest.ValidateAll() if the
// designated constraints aren't met.
type GetTtsConfigByUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTtsConfigByUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTtsConfigByUserRequestMultiError) AllErrors() []error { return m }

// GetTtsConfigByUserRequestValidationError is the validation error returned by
// GetTtsConfigByUserRequest.Validate if the designated constraints aren't met.
type GetTtsConfigByUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTtsConfigByUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTtsConfigByUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTtsConfigByUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTtsConfigByUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTtsConfigByUserRequestValidationError) ErrorName() string {
	return "GetTtsConfigByUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTtsConfigByUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTtsConfigByUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTtsConfigByUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTtsConfigByUserRequestValidationError{}
