syntax = "proto3";

package ttsschema;
option go_package = "speech-tts/api/tts/v2;v2";

import "google/api/annotations.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/empty.proto";

service CloudMindsTTS {
    // 合成音频流的流式接口
    rpc Call (TtsReq) returns (stream TtsRes) {}
    // 获取服务版本信息
    rpc GetVersion (VerVersionReq) returns (VerVersionRsp) {
        option (google.api.http) = {
            get: "/speech/tts/getVersion",
        };
    }
    // 获取服务端配置信息
    rpc GetTtsConfig (VerReq) returns (RespGetTtsConfig) {
        // 获取服务端配置信息
        option (google.api.http) = {
            get: "/speech/tts/getConfig",
        };
    }

    //获取指定用户发音人信息
    rpc GetUserSpeakers(GetUserSpeakersRequest) returns (GetUserSpeakersResponse){
        option (google.api.http) = {
            get: "/speech/tts/get-user-speakers",
        };
    }

    rpc GetTtsConfigByUser(GetTtsConfigByUserRequest) returns (RespGetTtsConfig){
        option (google.api.http) = {
            get: "/speech/tts/getConfigByUser",
        };
    }

    rpc Register(RegisterReq) returns (RegisterResp){
        option (google.api.http) = {
            post: "/speech/tts/register",
            body: "*"
        }; // 注册 登录
    }
}

enum ClientVersion{
    Invalid = 0;
    Version = 0xc06485;
}



message TtsReq {
    string text = 1;                            // 具体需要合成的文本，支持带json
    string speed = 2;                           // 取值范围请用 GetTtsConfig SpeedList
    string volume = 3;                          // 取值范围请用 GetTtsConfig VolumeList
    string pitch = 4;                           // 取值范围请用 GetTtsConfig PitchList.Name
    string emotions = 5;                        // 如果该发音人支持情感，取值范围请用 GetTtsConfig EmotionList.Name，如果不支持请传""，否则会报错
    string parameter_speaker_name = 6;          // 取值范围请用 GetTtsConfig函数的返回Speakerlist.parameterSpeakerName
    string parameter_digital_person = 7 [deprecated = true];        // **********数字人形象，  (废弃不用)  *******************
    map<string, string> parameter_flag = 8;     // 额外信息参数，口型key:mouth,字符串"true"或者"false"；动作movement， 字符串"true"或者"false"； 表情expression、字符串"true"或者"false";动作具体参数key:movementPara,value的取值范围参考GetTtsConfig-MessageMovement.name; 表情具体参数key:expressionPara,value的取值范围参考GetTtsConfig-MessageExpression.name
    string trace_id = 9;                        //  trace_id
    string root_trace_id = 10;                  //  机器人请求ID
    string language = 11;                       //  语种提示
    string userspace = 12;                      //  指定租户  默认cloudminds
    int32  audio_encoding = 13;                 //  LINEAR16 = 0, OPUS = 1,
    ClientVersion version = 100;                //  标识客户端版本号
}

message TtsRes {
    int32 error_code = 1;                       // 错误码，非0为错误，0为正确
    int32 status = 2;                           // 合成状态，1.开始，2.中间，3，结束
    string error_msg = 3;                       // 错误信息正确为空，不正确具体字符串

    oneof result_oneof {
        SynthesizedAudio synthesized_audio = 4; // 音频
        DebugInfo debug_info = 5;               // 调试信息,当有debug_info时需要输出
        ActionElement action_element = 6;       // 基元数据
        ConfigAndText config_text = 7;          // 文本配置信息start时会返回
        TimedMouthShapes time_mouth_shapes = 8; // 口型数据
        Expression expression = 9;              // 表情数据
        BodyMovement body_movement = 10;        // 动作数据
        CoordinateMapping  coordinate_mapping = 11;   // 坐标数据映射关系
        AudioData       audio_data = 12;        // 编码后的音频数据
    }
}

// 音频流
message SynthesizedAudio {
    bytes pcm = 1;                              // pcm
    Coordinate coordinate = 2;                  // 坐标信息
    int32 is_punctuation = 3;                   // 是否标点1是标点
}

message AudioData{
    bytes audio = 1;                              // 编码的音频数据
}

message TimeCoordinate {
    int32 start_time = 1;                        // 音频开始时间
    int32 duration = 2;                          // 音频持续时间
}

message CoordinateMapping{
    Coordinate coordinate = 1;                  // 文本坐标信息
    TimeCoordinate time_coordinate = 2;         // 时间坐标信息
}

// 调试信息
message DebugInfo {
    string debug_type = 1;                      // 调试类型
    string info = 2;                            //  调试信息
}

// Action基元数据
message ActionElement {
    int32 action_type = 1;                      // actionType 基元类型，-100<action_type<100
    string url = 2;                             // 基元数据的url
    int32 operation_type = 3;                   // action操作类型，-100<operation_type<100
    Coordinate coordinate = 4;                  // 该数据的坐标信息
    int32 render_duration = 5;                  // render_duration 渲染时长（该值不应大于文件时长）单位ms，-1代表持续到指定文件结束，-2代表由coordinate的len_utf8部分决定时长
}

// 音频流
message ConfigAndText {
    string text = 1;                                     // 文本信息
    FacialExpressionConfig facial_expression_config = 2; // 表情配置
    BodyMovementConfig body_movement_config = 3;         // 动作配置
    AudioConfig         audio_config = 4;                // 音频配置
}

//
message FacialExpressionConfig {
    int32 frame_dim = 1;                                // 每帧的维度，即一帧由frameDim个float组成
    float frame_dur_ms = 2;                             // 每帧的持续时长
    string meta_data = 3;                               // 伴生数据的其他描述性信息(json)
}

//
message BodyMovementConfig {
    int32 frame_dim = 1;                                // 每帧的维度，即一帧由frameDim个float组成
    float frame_dur_ms = 2;                             // 每帧的持续时长
    string meta_data = 3;                               // 伴生数据的其他描述性信息(json)
}

message  AudioConfig {
    int32 sampling_rate = 1;                           // 采样率，16000Hz
    int32 channels = 2;                                // 通道数, 1--mono
    int32 audio_encoding =3;                           // 音频编码, 参考enum AudioEncoding
}

// 口型
message TimedMouthShapes {
    repeated TimedMouthShape mouths = 1;                // 口型数据
    float start_time_ms = 2;                            // 该段口型的起始时间，单位ms
}

// 表情
message Expression {
    repeated float data = 1;                            // 具体的表情数据, frame_size*frame_dim,frame_dim见FacialExpressionConfig
    int32 frame_size = 2;                               // 表情帧数
    float start_time_ms = 3;                            // 起始时间，单位ms
}

// 动作
message BodyMovement {
    repeated float data = 1;                            // 具体动作数据，frame_dim*frame_size个float,frame_dim见BodyMovementConfig
    int32 frame_size = 2;                               // 动作帧数
    float start_time_ms = 3;                            // 起始时间，单位ms
}

// 坐标信息
message Coordinate {
    int32 off = 1;                                      // 文本起点
    int32 len = 2;                                      // 文本长度
    int32 order = 3;
    // 当len_utf8 = 0时，order与off_utf8一起描述一个的时间点。具体地，当off_utf8相同时，order相同则认为同时，order不同时，0优先，1次之，依次类推
    // 当len_utf8 > 0时，order无意义
}

message TimedMouthShape {
    uint64 duration_us = 1;                             // 时间
    int32 mouth = 2;                                    // 嘴型 enum MouthShape
}

message VerVersionReq {
}

message VerVersionRsp {
    string version = 1;                                  // 版本号
}

message VerReq {
}

message RespGetTtsConfig {
    SpeakerList speaker_list = 1;                           // 发音人列表
    repeated string speed_list = 2;                         // SupportedSpeed
    repeated string volume_list = 3;                        // SupportedVolume
    repeated MessagePitch pitch_list = 4;                   // SupportedPitch
    repeated MessageEmotion emotion_list = 5;               // SupportedEmotion
    repeated MessageDigitalPerson digital_person_list = 6 [deprecated = true];  // MessageDigitalPerson 废弃不用
    repeated MessageMovement  movement_list  = 7;            // SupportedMovement  动作
    repeated MessageExpression  expression_list  = 8;        // SupportedExpression 表情
}

message SpeakerList {
    repeated SpeakerParameter list = 1;                     // 发音人列表
}

message SpeakerParameter {
    int32 speaker_id = 1 [deprecated = true];               // 发音人id （废弃不用）
    string speaker_name = 2;                                // 发音人名字
    string parameter_speaker_name = 3;                      // 发音人英文名字
    bool is_support_emotion = 4;                            // 是否支持情感
    bool is_support_mixed_voice = 5;                        // 是否支持混合发音
    bool  is_belong_clone = 6;                              // 是否属于克隆的发音人
}

message MessagePitch {

    string name = 2;                                        // 参数
    string chinese_name = 3;                                // 对应中文
}

message MessageEmotion {

    string name = 2;                                        // 参数
    string chinese_name = 3;                                // 对应中文
}

message MessageDigitalPerson {

    string name = 2;                                        // 参数
    string chinese_name = 3;                                // 对应中文
}

message MessageMovement{
    string name = 1;                                    // 用于传参
    string chinese_name = 2;                            // 对应中文
}

message MessageExpression{
    string name = 1;                                    // 用于传参
    string chinese_name = 2;                            // 对应中文
}

message  RegisterReq {
    string account = 1;
    int32  expire = 2;
}

message RegisterResp{
    string token = 1;
}

message GetUserSpeakersRequest{
    string trace_id = 1;
    string user = 2;
}

message GetUserSpeakersResponse{
    repeated string  speakers = 1;
}

message GetTtsConfigByUserRequest{
    string trace_id = 1;
    string user = 2;
}