// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"speech-tts/internal/cgo/service"
	"speech-tts/internal/conf"
	"speech-tts/internal/data"
	"speech-tts/internal/server"
	service2 "speech-tts/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
	_ "speech-tts/internal/pkg/catch"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, string2 string, logger log.Logger) (*kratos.App, func(), error) {
	speakerSetting, err := data.NewSpeakerSetting(string2)
	if err != nil {
		return nil, nil, err
	}
	ttsService := service.NewTTSService(string2, speakerSetting, logger)
	cloudMindsTTSService := service2.NewCloudMindsTTSService(logger, ttsService)
	cloudMindsTTSServiceV1 := service2.NewCloudMindsTTSServiceV1(logger, ttsService)
	grpcServer := server.NewGRPCServer(confServer, cloudMindsTTSService, cloudMindsTTSServiceV1, logger)
	httpServer := server.NewHTTPServer(confServer, cloudMindsTTSService, cloudMindsTTSServiceV1, logger)
	app := newApp(logger, grpcServer, httpServer, confData)
	return app, func() {
	}, nil
}
