// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: ttsData/v2/tts_res.proto

package ttsData

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TtsDataClient is the client API for TtsData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TtsDataClient interface {
	GetTtsData(ctx context.Context, in *GetTtsDataRequest, opts ...grpc.CallOption) (*GetTtsDataResponse, error)
	AddTtsData(ctx context.Context, in *AddTtsDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DelTtsData(ctx context.Context, in *DelTtsDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateTtsData(ctx context.Context, in *UpdateTtsDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GeneToken(ctx context.Context, in *GeneTokenRequest, opts ...grpc.CallOption) (*GeneTokenResponse, error)
	GetAllResource(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllResourceResult, error)
	GetSpeakerModel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSpeakerModelResult, error)
	RegisterResService(ctx context.Context, in *RegisterResServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnRegisterResService(ctx context.Context, in *UnRegisterResServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type ttsDataClient struct {
	cc grpc.ClientConnInterface
}

func NewTtsDataClient(cc grpc.ClientConnInterface) TtsDataClient {
	return &ttsDataClient{cc}
}

func (c *ttsDataClient) GetTtsData(ctx context.Context, in *GetTtsDataRequest, opts ...grpc.CallOption) (*GetTtsDataResponse, error) {
	out := new(GetTtsDataResponse)
	err := c.cc.Invoke(ctx, "/tts_data.v2.TtsData/GetTtsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ttsDataClient) AddTtsData(ctx context.Context, in *AddTtsDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tts_data.v2.TtsData/AddTtsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ttsDataClient) DelTtsData(ctx context.Context, in *DelTtsDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tts_data.v2.TtsData/DelTtsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ttsDataClient) UpdateTtsData(ctx context.Context, in *UpdateTtsDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tts_data.v2.TtsData/UpdateTtsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ttsDataClient) GeneToken(ctx context.Context, in *GeneTokenRequest, opts ...grpc.CallOption) (*GeneTokenResponse, error) {
	out := new(GeneTokenResponse)
	err := c.cc.Invoke(ctx, "/tts_data.v2.TtsData/GeneToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ttsDataClient) GetAllResource(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllResourceResult, error) {
	out := new(GetAllResourceResult)
	err := c.cc.Invoke(ctx, "/tts_data.v2.TtsData/GetAllResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ttsDataClient) GetSpeakerModel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSpeakerModelResult, error) {
	out := new(GetSpeakerModelResult)
	err := c.cc.Invoke(ctx, "/tts_data.v2.TtsData/GetSpeakerModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ttsDataClient) RegisterResService(ctx context.Context, in *RegisterResServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tts_data.v2.TtsData/RegisterResService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ttsDataClient) UnRegisterResService(ctx context.Context, in *UnRegisterResServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tts_data.v2.TtsData/UnRegisterResService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TtsDataServer is the server API for TtsData service.
// All implementations must embed UnimplementedTtsDataServer
// for forward compatibility
type TtsDataServer interface {
	GetTtsData(context.Context, *GetTtsDataRequest) (*GetTtsDataResponse, error)
	AddTtsData(context.Context, *AddTtsDataRequest) (*emptypb.Empty, error)
	DelTtsData(context.Context, *DelTtsDataRequest) (*emptypb.Empty, error)
	UpdateTtsData(context.Context, *UpdateTtsDataRequest) (*emptypb.Empty, error)
	GeneToken(context.Context, *GeneTokenRequest) (*GeneTokenResponse, error)
	GetAllResource(context.Context, *emptypb.Empty) (*GetAllResourceResult, error)
	GetSpeakerModel(context.Context, *emptypb.Empty) (*GetSpeakerModelResult, error)
	RegisterResService(context.Context, *RegisterResServiceRequest) (*emptypb.Empty, error)
	UnRegisterResService(context.Context, *UnRegisterResServiceRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTtsDataServer()
}

// UnimplementedTtsDataServer must be embedded to have forward compatible implementations.
type UnimplementedTtsDataServer struct {
}

func (UnimplementedTtsDataServer) GetTtsData(context.Context, *GetTtsDataRequest) (*GetTtsDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTtsData not implemented")
}
func (UnimplementedTtsDataServer) AddTtsData(context.Context, *AddTtsDataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTtsData not implemented")
}
func (UnimplementedTtsDataServer) DelTtsData(context.Context, *DelTtsDataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTtsData not implemented")
}
func (UnimplementedTtsDataServer) UpdateTtsData(context.Context, *UpdateTtsDataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTtsData not implemented")
}
func (UnimplementedTtsDataServer) GeneToken(context.Context, *GeneTokenRequest) (*GeneTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneToken not implemented")
}
func (UnimplementedTtsDataServer) GetAllResource(context.Context, *emptypb.Empty) (*GetAllResourceResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllResource not implemented")
}
func (UnimplementedTtsDataServer) GetSpeakerModel(context.Context, *emptypb.Empty) (*GetSpeakerModelResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpeakerModel not implemented")
}
func (UnimplementedTtsDataServer) RegisterResService(context.Context, *RegisterResServiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterResService not implemented")
}
func (UnimplementedTtsDataServer) UnRegisterResService(context.Context, *UnRegisterResServiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnRegisterResService not implemented")
}
func (UnimplementedTtsDataServer) mustEmbedUnimplementedTtsDataServer() {}

// UnsafeTtsDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TtsDataServer will
// result in compilation errors.
type UnsafeTtsDataServer interface {
	mustEmbedUnimplementedTtsDataServer()
}

func RegisterTtsDataServer(s grpc.ServiceRegistrar, srv TtsDataServer) {
	s.RegisterService(&TtsData_ServiceDesc, srv)
}

func _TtsData_GetTtsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTtsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TtsDataServer).GetTtsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tts_data.v2.TtsData/GetTtsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TtsDataServer).GetTtsData(ctx, req.(*GetTtsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TtsData_AddTtsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTtsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TtsDataServer).AddTtsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tts_data.v2.TtsData/AddTtsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TtsDataServer).AddTtsData(ctx, req.(*AddTtsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TtsData_DelTtsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTtsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TtsDataServer).DelTtsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tts_data.v2.TtsData/DelTtsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TtsDataServer).DelTtsData(ctx, req.(*DelTtsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TtsData_UpdateTtsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTtsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TtsDataServer).UpdateTtsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tts_data.v2.TtsData/UpdateTtsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TtsDataServer).UpdateTtsData(ctx, req.(*UpdateTtsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TtsData_GeneToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TtsDataServer).GeneToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tts_data.v2.TtsData/GeneToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TtsDataServer).GeneToken(ctx, req.(*GeneTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TtsData_GetAllResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TtsDataServer).GetAllResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tts_data.v2.TtsData/GetAllResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TtsDataServer).GetAllResource(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TtsData_GetSpeakerModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TtsDataServer).GetSpeakerModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tts_data.v2.TtsData/GetSpeakerModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TtsDataServer).GetSpeakerModel(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TtsData_RegisterResService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterResServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TtsDataServer).RegisterResService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tts_data.v2.TtsData/RegisterResService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TtsDataServer).RegisterResService(ctx, req.(*RegisterResServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TtsData_UnRegisterResService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnRegisterResServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TtsDataServer).UnRegisterResService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tts_data.v2.TtsData/UnRegisterResService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TtsDataServer).UnRegisterResService(ctx, req.(*UnRegisterResServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TtsData_ServiceDesc is the grpc.ServiceDesc for TtsData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TtsData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tts_data.v2.TtsData",
	HandlerType: (*TtsDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTtsData",
			Handler:    _TtsData_GetTtsData_Handler,
		},
		{
			MethodName: "AddTtsData",
			Handler:    _TtsData_AddTtsData_Handler,
		},
		{
			MethodName: "DelTtsData",
			Handler:    _TtsData_DelTtsData_Handler,
		},
		{
			MethodName: "UpdateTtsData",
			Handler:    _TtsData_UpdateTtsData_Handler,
		},
		{
			MethodName: "GeneToken",
			Handler:    _TtsData_GeneToken_Handler,
		},
		{
			MethodName: "GetAllResource",
			Handler:    _TtsData_GetAllResource_Handler,
		},
		{
			MethodName: "GetSpeakerModel",
			Handler:    _TtsData_GetSpeakerModel_Handler,
		},
		{
			MethodName: "RegisterResService",
			Handler:    _TtsData_RegisterResService_Handler,
		},
		{
			MethodName: "UnRegisterResService",
			Handler:    _TtsData_UnRegisterResService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ttsData/v2/tts_res.proto",
}
